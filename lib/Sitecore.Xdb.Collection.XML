<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sitecore.Xdb.Collection</name>
    </assembly>
    <members>
        <member name="M:Sitecore.Xdb.Collection.AsyncLinqExtensions.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Turns a normal enumeration into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> by projecting every element with the async <paramref name="projection"/>
            </summary>
            <remarks>
            It is critical that <paramref name="enumerable"/> is not running any IO bound operations, as it'd defeat the point of using an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.AsyncLinqExtensions.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Equivalent to linq's select, but with an async projection method.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.AsyncLinqExtensions.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Equivalent to linq's select many. 
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="projection">The projection that's not doing any IO bound calls, normally just returning data that's already in the <typeparamref name="TSource"/>.</param>
            <remarks>
            It is critical that enumeration returned by <paramref name="projection"/> is not running any IO bound operations, as it'd defeat the point of using an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.CountSplitPreference">
            <summary>
            A <see cref="T:Sitecore.Xdb.Collection.Export.CursorSplitPreference"/> where the split cursor approximately contains the preferred number of records.
            </summary>    
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.CountSplitPreference.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.CountSplitPreference"/> class.
            </summary>
            <param name="preferredCount">The preferred count.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.CountSplitPreference.PreferredCount">
            <summary>
            Gets the preferred number of records for the split cursor.
            </summary>
            <value>
            The preferred count.
            </value>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.CursorReadResult`2">
            <summary>
            Represents the result when a cursor is read.
            </summary>
            <typeparam name="TDataRecord">The type of the data record.</typeparam>
            <typeparam name="TCursor">The type of the cursor.</typeparam>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.CursorReadResult`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.CursorReadResult`2"/> class.
            </summary>
            <param name="records">The records.</param>
            <param name="nextCursor">The next cursor.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.CursorReadResult`2.Records">
            <summary>
            Gets the records read by the cursor.
            </summary>
            <value>
            The records.
            </value>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.CursorReadResult`2.NextCursor">
            <summary>
            Gets the cursor to read the next batch of records.
            </summary>
            <value>
            The next cursor.
            </value>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.IInteractionCursor">
            <summary>
            An interaction cursor points to a specific, ordered set of interactions. 
            A cursor is immutable and contains all the required state to identifiy its records. Hence, it can be persisted to read the same records at a later point in time.    
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.IInteractionCursor.MinimumStartDateTime">
            <summary>
            Gets the minimum start date time for the interactions in the set.
            </summary>
            <value>
            The minimum start date time.
            </value>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.IInteractionCursor.MaximumStartDateTime">
            <summary>
            Gets the maximum start date time for the interactions in the set.
            </summary>
            <value>
            The maximum start date time.
            </value>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.ReadContactCursorResult">
            <summary>
            Represents the results when a cursor for contacts is read
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.ReadContactCursorResult.#ctor(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactDataRecord},Sitecore.Xdb.Collection.Export.ICursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.ReadContactCursorResult"/> class.
            </summary>
            <param name="records">The records read by contacts cursor.</param>
            <param name="nextCursor">The next cursor.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.SplitContactCursorResult">
            <summary>
            Contains the resulting two cursors when a contact cursor is split.
            One will contain the records according to the <see cref="T:Sitecore.Xdb.Collection.Export.CursorSplitPreference"/>, and the other the remaining records.
            If the cursor could not be split, for example if more records were requested end the split than the cursor contains, the remainder will not be set.
            </summary>        
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.SplitContactCursorResult.#ctor(Sitecore.Xdb.Collection.Export.ICursor,Sitecore.Xdb.Collection.Export.ICursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.SplitContactCursorResult"/> class.
            </summary>
            <param name="split">The split cursor.</param>
            <param name="remainder">The remainder cursor.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.SplitCursorResult`1">
            <summary>
            Contains the resulting two cursors when a cursor is split.
            One will contain the records according to the <see cref="T:Sitecore.Xdb.Collection.Export.CursorSplitPreference"/>, and the other the remaining records.
            If the cursor could not be split, for example if more records were requested end the split than the cursor contains, the remainder will not be set.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.SplitCursorResult`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.SplitCursorResult`1"/> class.
            </summary>
            <param name="split">The split cursor.</param>
            <param name="remainder">The remainder cursor.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.SplitCursorResult`1.Split">
            <summary>
            Gets a cursor that points to the records according to the <see cref="T:Sitecore.Xdb.Collection.Export.CursorSplitPreference"/>.
            </summary>
            <value>
            The split cursor.
            </value>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.SplitCursorResult`1.Remainder">
            <summary>
            Gets a cursor that points to the remaining records.
            This can be null.
            </summary>
            <value>
            The remainder cursor.
            </value>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.InteractionExportFilter">
            <summary>
            Defines a filter for the interactions to export.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.InteractionExportFilter.#ctor(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.InteractionExportFilter"/> class with upper and lower bounds for the interactions' StartDateTime.
            </summary>
            <param name="cutoffDate">The cutoff date, that is the exclusive upper bound for the interactions' save date.</param>
            <param name="minimumStartDateTime">The minimum start date time (inclusive).</param>
            <param name="maximumStartDateTime">The maximum start date time (exclusive).</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.InteractionExportFilter.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.InteractionExportFilter"/> class.
            </summary>
            <param name="cutoffDate">The cutoff date, that is the exclusive upper bound for the interactions' save date.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.InteractionExportFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.InteractionExportFilter"/> class.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.InteractionExportFilter.CutoffDate">
            <summary>
            Gets the cutoff date, that is the exclusive upper bound for the interactions' save date
            </summary>
            <value>
            The cutoff date.
            </value>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.InteractionExportFilter.MinimumStartDateTime">
            <summary>
            Gets the inclusive lower bound for the StartDateTime of the extracted interactions.
            </summary>
            <value>
            The minimum start date time.
            </value>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.InteractionExportFilter.MaximumStartDateTime">
            <summary>
            Gets the exclusive upper bound for the StartDateTime of the extracted interactions.
            </summary>
            <value>
            The maximum start date time.
            </value>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.CursorSplitPreference">
            <summary>
            Defines the preference for how a cursor should be split. 
            Implementors may choose not to honor this preference for performance reasons.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult">
            <summary>
            Contains the resulting two cursors when an interaction cursor is split.
            One will contain the records according to the <see cref="T:Sitecore.Xdb.Collection.Export.CursorSplitPreference"/>, and the other the remaining records.
            If the cursor could not be split, for example if more records were requested end the split than the cursor contains, the remainder will not be set.
            </summary>    
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult.#ctor(Sitecore.Xdb.Collection.Export.IInteractionCursor,Sitecore.Xdb.Collection.Export.IInteractionCursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult"/> class.
            </summary>
            <param name="split">The split cursor.</param>
            <param name="remainder">The remainder cursor.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.ICursor">
            <summary>
            A cursor points to a specific, ordered set of records. 
            A cursor is immutable and contains all the required state to identifiy its records. Hence, it can be persisted to read the same records at a later point in time.    
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.ICursor.TotalCount">
            <summary>
            Gets the total number of records in the set. This is an estimate if <see cref="P:Sitecore.Xdb.Collection.Export.ICursor.IsCountEstimated"/> is <c>true</c>.
            </summary>
            <value>
            The estimated count.
            </value>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Export.ICursor.IsCountEstimated">
            <summary>
            Gets a value indicating whether <see cref="P:Sitecore.Xdb.Collection.Export.ICursor.TotalCount"/> is estimated.
            </summary>
            <value>
              <c>true</c> if the count is an estimate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark">
            <summary>
            Returns a byte representation of this cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult">
            <summary>
            Represents the results when a cursor for interactions is read
            </summary>    
        </member>
        <member name="M:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult.#ctor(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.InteractionDataRecord},Sitecore.Xdb.Collection.Export.IInteractionCursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> class.
            </summary>
            <param name="records">The records read by interactions cursor.</param>
            <param name="nextCursor">The next cursor.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.IncompatibleSyncTokensException">
            <summary>
            The exception that is thrown when two instances of <see cref="T:Sitecore.Xdb.Collection.ISyncToken"/> are incompatible, for instance they have different set of shards.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.IncompatibleSyncTokensException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.IncompatibleSyncTokensException" /> class. This is the default constructor.</summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.IncompatibleSyncTokensException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.IncompatibleSyncTokensException" /> class with the specified string.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.IncompatibleSyncTokensException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified string and inner exception.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.IncompatibleSyncTokensException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified serialization information and context.</summary>
            <param name="info">The data necessary to serialize or deserialize an object. </param>
            <param name="context">Description of the source and destination of the specified serialized stream. </param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException">
            <summary>
            The exception that is thrown when ​scaled database was not configured properly.
            </summary>
            <seealso cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" />
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException" /> class. This is the default constructor.</summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException" /> class with the specified string.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified string and inner exception.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ScaledDatabaseConfigurationException" /> class with the specified serialization information and context.</summary>
            <param name="info">The data necessary to serialize or deserialize an object. </param>
            <param name="context">Description of the source and destination of the specified serialized stream. </param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail">
            <summary>
            The details of the ids involved in a <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException"/>
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail" /> class.</summary>
            <param name="interactionId">The id of the <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/> involved in the failure</param>
            <param name="contactIdInInteraction">The <see cref="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.ContactId"/> involved in the failure</param>
            <param name="contactIdInMainRecord">The id of the <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> involved in the failure</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail.InteractionId">
            <summary>
            Gets the id of the <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/> involved in the failure
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail.ContactIdInInteraction">
            <summary>
            Gets sets the <see cref="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.ContactId"/> involved in the failure
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail.ContactIdInMainRecord">
            <summary>
            Gets the id of the <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> involved in the failure
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException">
            <summary>
            The exception that is used to indicate the id of the <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> did not match the <see cref="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.ContactId"/> contained in <see cref="P:Sitecore.Xdb.Collection.Model.ContactDataRecord.Interactions"/>
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException" /> class. This is the default constructor.</summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException" /> class with the specified string.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException" /> class with the specified string and inner exception.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.#ctor(Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException" /> class.</summary>
            <param name="mismatchedDetails">The information of the ids involved in the failure</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.#ctor(System.String,Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException" /> class.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="mismatchedDetails">The information of the ids involved in the failure</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.#ctor(System.String,Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException" /> class.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="mismatchedDetails">The information of the ids involved in the failure</param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified serialization information and context.</summary>
            <param name="info">The data necessary to serialize or deserialize an object. </param>
            <param name="context">Description of the source and destination of the specified serialized stream. </param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.MismatchedDetails">
            <summary>
            The information of the ids involved in the failure
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.Message">
            <summary>
            Gets the error message and the <see cref="T:Sitecore.Xdb.Collection.Failures.ContactIdMismatchDetail"/>, or only the error message if no details are set.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overrides <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> to include <see cref="P:Sitecore.Xdb.Collection.Failures.ContactIdMismatchException.MismatchedDetails"/>
            </summary>
            <param name="info">the <see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context">the <see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.DuplicateIdException">
            <summary>
            The exception thrown when duplicate ids are detected in a set of changes.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.#ctor(System.Guid)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DuplicateIdException" /> class.</summary>
            <param name="id">The id that was contained in more than 1 record.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.#ctor(System.String,System.Guid)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DuplicateIdException" /> class.</summary>
            <param name="message">The string to display when the exception is thrown.</param>
            <param name="id">The id that was contained in more than 1 record.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.#ctor(System.String,System.Guid,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DuplicateIdException" /> class.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="id">The id that was contained in more than 1 record.</param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DuplicateIdException" /> class.</summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DuplicateIdException" /> class.</summary>
            <param name="message">The string to display when the exception is thrown.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DuplicateIdException" /> class.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified serialization information and context.</summary>
            <param name="info">The data necessary to serialize or deserialize an object. </param>
            <param name="context">Description of the source and destination of the specified serialized stream. </param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.DuplicateIdException.Id">
            <summary>
            The <see cref="P:Sitecore.Xdb.Collection.Model.DataRecord.Id"/> that was duplicate.
            </summary>
            <remarks>
            This field is <c>null</c> when the exception was created without including details on the Id involved in the failure.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.DuplicateIdException.Message">
            <summary>
            Gets the error message and the id of the record, or only the error message if no id is set.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DuplicateIdException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overrides <see cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> to include <see cref="P:Sitecore.Xdb.Collection.Failures.DuplicateIdException.Id"/>
            </summary>
            <param name="info">the <see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context">the <see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.RepositoryException">
            <summary>
            The exception that is thrown when unexpected errors reading/writting information with the <see cref="T:Sitecore.Xdb.Collection.IRepository"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.RepositoryException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.RepositoryException" /> class. This is the default constructor.</summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.RepositoryException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.RepositoryException" /> class with the specified string.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.RepositoryException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.RepositoryException" /> class with the specified string and inner exception.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.RepositoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.RepositoryException" /> class with the specified serialization information and context.</summary>
            <param name="info">The data necessary to serialize or deserialize an object. </param>
            <param name="context">Description of the source and destination of the specified serialized stream. </param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.DataProviderException">
            <summary>
            The exception that is thrown when unexpected errors reading/writting information with the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DataProviderException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class. This is the default constructor.</summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DataProviderException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified string.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DataProviderException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified string and inner exception.</summary>
            <param name="message">The string to display when the exception is thrown. </param>
            <param name="innerException">A reference to an inner exception. </param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.DataProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Failures.DataProviderException" /> class with the specified serialization information and context.</summary>
            <param name="info">The data necessary to serialize or deserialize an object. </param>
            <param name="context">Description of the source and destination of the specified serialized stream. </param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.SaveFailure">
            <summary>
                Defines basic information about a failure that occured during a modification operation.
            </summary>
            <remarks>
            Instances for the common failures, such as <see cref="P:Sitecore.Xdb.Collection.Failures.SaveFailure.ChangeConflict"/>, may be safely reused, as these are immutable.
            
            Instances returned by <see cref="M:Sitecore.Xdb.Collection.Failures.SaveFailure.System(Sitecore.Xdb.Collection.Failures.RepositoryException)"/> must not be reused when reporting failures for unrelated changes, 
            as the contained exception is mutable (all <see cref="P:Sitecore.Xdb.Collection.Failures.SaveFailure.Exception"/> are).
            Additionally, these are meant to be used to report results when an unexpected error happens,
            so this is normally in response to an exception that was thrown, which includes additional stacktrace information.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.SaveFailure.ChangeConflict">
            <summary>
            A failure indicating a <see cref="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.ChangeConflict"/> occurred.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.SaveFailure.NotFound">
            <summary>
            A failure indicating a <see cref="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.NotFound"/> occurred.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.SaveFailure.AlreadyExists">
            <summary>
            A failure indicating a <see cref="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.AlreadyExists"/> occurred.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.SaveFailure.ReferenceNotFound">
            <summary>
            A failure indicating a <see cref="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.ReferenceNotFound"/> occurred.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.SaveFailure.TemporaryUnavailable">
            <summary>
            A failure indicating a <see cref="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.TemporaryUnavailable"/> occurred.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.SaveFailure.FailureType">
            <summary>
                Indicates the type of error that occured during save operation.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Failures.SaveFailure.Exception">
            <summary>
                Contains exception for non-recoverable cases, for example if FailureType property is set to HardFailure.
                In other cases the property will be null.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.SaveFailure.System(Sitecore.Xdb.Collection.Failures.RepositoryException)">
            <summary>
            A failure indicating an unexpected error occurred.
            </summary>
            <param name="exception">the exception with the details of the failure</param>
            <returns>The failure instance.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Failures.SaveFailure.Common(Sitecore.Xdb.Collection.Failures.SaveFailureType)">
            <summary>
            Gets an immutable / reusable instance representing the type specified.
            </summary>
            <param name="type">The type of the failure.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.Failures.SaveFailure"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="type"/> was <see cref="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.System"/> or some unknown <see cref="T:Sitecore.Xdb.Collection.Failures.SaveFailureType"/></exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Failures.SaveFailureType">
            <summary>
                Defines failure types that can occur during update, insert, delete operations.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.ChangeConflict">
            <summary>
            The received entity/facet being updated/deleted had already been changed by another thread/process/application.
            </summary>
            <remarks>
            The concurrency token for the updated record is not the same as in the database.
            
            Possible reason: Somebody had updated the same record before you performed the save operation.
            </remarks>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.AlreadyExists">
            <summary>
            The received entity/facet/identifier being added had already been added by another thread/process/application.
            </summary>
            <remarks>
            Note that this only applies for entities that allow to use IDs generated from the client. At the time of writting, this is only for device profiles.
            </remarks>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.NotFound">
            <summary>
            The entity/facet being updated/deleted wasn't found in the system.
            </summary>
            <remarks>
            Possible reason: Somebody had removed the entity/facet before you tried to update/delete it.
            </remarks>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.ReferenceNotFound">
            <summary>
            The entity/facet being added/updated points to another entity/facet that's no longer in the system.
            </summary>
            <remarks>
            Possible reasons:
            - The entity for the facet being added/updated has been removed by another thread/process/application.
            - The contact for the interaction being added has been removed by another thread/process/application.
            - The contact pointed by <see cref="P:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord.LastKnownContactId"/> has been removed by another thread/process/application.
            </remarks>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.System">
            <summary>
            There was an unexpected exception when trying to save the changes for the entity/facet.
            </summary>
            <remarks>
            Possible reasons: connection timeout, inaccessible shard, etc.
            </remarks>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Failures.SaveFailureType.TemporaryUnavailable">
            <summary>
            The record is temporary unavailable to update. Specific to the contact identifier index.
            The contact identifier index is locked.
            </summary>
            <remarks>
            Possible reasons: the contact identifier index has been added and locked for some time 
            (in order to complete all other save operations with contact and contact identifiers)
            and another thread tries to add the same identifier into the index.
            The temporary unavailable means that contact identifier can't be saved (added/deleted) and can't be treated as 
            already existed identifier, because it might be deleted in case if contact is not saved successfully.
            The simple retry has to be performed with such type of failure.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.AsyncForeachExtensions.ParallelAsyncForeach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationTokenSource,System.Threading.Tasks.Task},System.Int32)">
            <remarks>
            Enumeration is aborted if previous <paramref name="asyncAction"/>s are detected as <see cref="P:System.Threading.Tasks.Task.IsFaulted"/>.
            When this happens, any ongoing <paramref name="asyncAction"/> is canceled via the <see cref="T:System.Threading.CancellationToken"/> passed to it.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords">
            <summary>
            Records where either the main record or one of its facets changed.
            </summary>
            <remarks>
            All facets must be indexed.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords.#ctor(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactDataRecord},System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.InteractionDataRecord},System.Collections.Generic.IReadOnlyCollection{System.Guid},System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.InteractionIdsByContactId})">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords"/>.
            </summary>
            <param name="contactRecords">the modified contacts with its facets.</param>
            <param name="interactionRecords">the modified interactions with its facets.</param>
            <param name="deletedContactIds">the deleted contact ids.</param>
            <param name="deletedInteractionIds">the deleted interaction ids grouped by contact id.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords.ContactRecords">
            <summary>
            Gets the modified contacts with its facets.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords.InteractionRecords">
            <summary>
            Gets the modified interactions with its facets.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords.DeletedInteractionIds">
            <summary>
            Gets the deleted interaction ids grouped by contact id.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords.DeletedContactIds">
            <summary>
            Gets the deleted contact ids.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedDataRecords.Count">
            <summary>
            Gets the total amount of records changed.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedIds.SyncToken">
            <summary>
            Gets a new sync token that includes all the changes in this instance.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedIds.DeletedContactIds">
            <summary>
            Gets all the deleted contact ids, not including contacts that were added again in this same result set.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedIds.DeletedInteractionIds">
            <summary>
            Gets all the deleted interaction ids grouped by contact id, not including interactions that were added again in this same result set.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedIds.ChangedContactIds">
            <summary>
            Gets all the added and updated contact ids, not including contacts that ended up being deleted in this same result set.
            </summary>
            <remarks>
            Any changes to identifiers is also considered a change to the contact, 
            since from the indexing point of view the identifiers are part of the contact.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedIds.ChangedInteractionIds">
            <summary>
            Gets all the added and updated interaction ids grouped by contact id, not including contacts that ended up being deleted in this same result set.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ChangedIds.ContactIdsWithUpdatedIdentifiers">
            <summary>
            Gets all the contact ids that had any type of identifiers added/deleted.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.DataProviderExtensions">
            <summary>
            Defines additional methods for <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.DataProviderExtensions.GetLatestSyncToken(Sitecore.Xdb.Collection.IDataProvider)">
            <summary>
            Retrieves the latest synctoken from the data provider.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <returns>The latest synctoken.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IIndexRebuilder">
            <summary>
            Defines provider dependent operations for rebuilding of the index.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexRebuilder.BeginRebuild">
            <summary>
            Signals the rebuild process is starting, so the rebuilder can prepare for the rebuild.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexRebuilder.CompleteRebuild(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Signals the rebuild process has completed,
            so that there can be performed additional steps, for instance, swapping indexing cores.
            </summary>
            <param name="syncToken">The latest sync token that should be written to index.
            It will be used to obtain changes after the rebuild process has finished.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexRebuilder.WriteDataBatch(Sitecore.Xdb.Collection.Indexing.ChangedDataRecords)">
            <summary>
            Writes the batch with changes to the index.
            </summary>
            <param name="changedDataRecordsBatch">The batch with changes to the index.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IIndexRebuildFlow">
            <summary>
            Provides functionality for rebuilding of the index.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexRebuildFlow.RunRebuild">
            <summary>
            Runs an index rebuild process explicitly.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexRebuildFlow.RegisterListener(Sitecore.Xdb.Collection.Indexing.IRebuildStatusChangedListener)">
            <summary>
            Registers the listener of rebuild status changed event. It reports about any changes related to the current rebuild process, i.e. progress, current rebuild stage and other messages.
            </summary>
            <param name="listener">The listener to register.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexRebuildFlow.UnregisterListener(Sitecore.Xdb.Collection.Indexing.IRebuildStatusChangedListener)">
            <summary>
            Removes the listener from the registration list.
            </summary>
            <param name="listener">The listener to unregister.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IndexerSettings">
            <summary>
            Defines configuration class for index writer.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexerSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.Indexing.IndexerSettings"/>.
            </summary>
            <param name="indexPIISensitiveData">Value indicating whether index writer should index PII sensitive data.</param>
            <param name="indexAnonymousContactData">Value indicating whether indexing anonymous contact data is enabled.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexerSettings.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.Indexing.IndexerSettings"/>.
            </summary>
            <param name="indexPIISensitiveData">Value indicating whether index writer should index PII sensitive data.</param>
            <param name="indexAnonymousContactData">Value indicating whether indexing anonymous contact data is enabled.</param>
            <param name="splitRecordsThreshold">Threshold for splitting of large change set.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexerSettings.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.Indexing.IndexerSettings"/> using dependency injection configuration binding
            </summary>
            <param name="config">Configuration object used to bind class properties to configuration options</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.IndexerSettings.IndexPIISensitiveData">
            <summary>
            Gets value indicating whether index writer should index PII sensitive data.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.IndexerSettings.IndexAnonymousContactData">
            <summary>
            Gets a value indicating whether indexing anonymous contact data is enabled.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.IndexerSettings.SplitRecordsThreshold">
            <summary>
            Gets a threshold for splitting of large change set.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IndexReaderDisabled">
            <summary>
            Implements an <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexReader"/> used in server roles where search has been disabled.
            </summary>
            <remarks>
            At the time of writing this is mainly used for collection-only XConnect servers.
            
            Note that this shouldn't be used by something like the indexer, 
            since <see cref="M:Sitecore.Xdb.Collection.Indexing.IndexReaderDisabled.GetDataCurrentlyIndexedToken"/> is used to determine how far the index is when the process is starting.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexReaderDisabled.GetDataCurrentlyIndexedToken">
            <summary>
            Implementation that throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexReaderDisabled.SearchContacts(Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Implementation that throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexReaderDisabled.SearchInteractions(Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Implementation that throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow">
            <summary>
            Implements default functionality to rebuild index;
            it also provides ability to fire events with information about current rebuild process stage and its progress.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow.#ctor(Sitecore.Xdb.Collection.IDataProvider,Sitecore.Xdb.Collection.Indexing.IIndexRebuilder,Sitecore.Xdb.Collection.Indexing.ISchemaReader,Sitecore.Xdb.Collection.Indexing.IndexerSettings,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes the instance of the <see cref="T:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow"/> class.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="indexRebuilder">The index rebuilder.</param>
            <param name="schemaReader">The schema reader.</param>
            <param name="indexerSettings">The indexer settings.</param>
            <param name="incomingDataLagOnCompletion">The time lag between live and rebuild data, when index rebuild is considered to be completed.</param>
            <param name="parallelizationDegree">The number of parallel threads to rebuild index.</param>
            <param name="batchSize">The batch size to use for chunks of data to rebuild.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow.#ctor(Sitecore.Xdb.Collection.IDataProvider,Sitecore.Xdb.Collection.Indexing.IIndexRebuilder,Sitecore.Xdb.Collection.Indexing.ISchemaReader,Sitecore.Xdb.Collection.Indexing.IndexerSettings,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes the instance of the <see cref="T:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow"/> class.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="indexRebuilder">The index rebuilder.</param>
            <param name="schemaReader">The schema reader.</param>
            <param name="indexerSettings">The indexer settings.</param>
            <param name="config">Configuration object used to bind class properties to configuration options.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow.RunRebuild">
            <inheritdoc />
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow.RegisterListener(Sitecore.Xdb.Collection.Indexing.IRebuildStatusChangedListener)">
            <inheritdoc />
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow.UnregisterListener(Sitecore.Xdb.Collection.Indexing.IRebuildStatusChangedListener)">
            <inheritdoc />
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexRebuildFlow.SynchronizeIndex(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Synchronizes data between the Index and the Data Provider.
            </summary>
            <param name="syncToken">The sync token to start from.</param>
            <returns>The latest sync token on which synchronization has been achieved.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IRebuildStatusChangedListener">
            <summary>
            Defines behavior for a listener of changing of the current rebuild status.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IRebuildStatusChangedListener.OnRebuildStatusChangedAsync(System.Object,Sitecore.Xdb.Collection.Indexing.RebuildStatusChangedEventArgs)">
            <summary>
            Invoked on RebuildStatusChanged event fired.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IRebuildStatusStorage">
            <summary>
            Defines a set of basic operations to work with <see cref="T:Sitecore.Xdb.Collection.Indexing.RebuildStatus"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IRebuildStatusStorage.WriteStatus(Sitecore.Xdb.Collection.Indexing.RebuildStatus)">
            <summary>
            Write the rebuild status to the storage.
            </summary>
            <param name="rebuildStatus">The rebuild status to be written.</param>
            <returns></returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IRebuildStatusStorage.ReadStatus">
            <summary>
            Reads the latest rebuild status from the storage.
            </summary>
            <returns>The rebuild status.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.ProgressReport">
            <summary>
            Defines a class for reporting progress of the index rebuild.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.ProgressReport.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the instance of the <see cref="T:Sitecore.Xdb.Collection.Indexing.ProgressReport"/> class.
            </summary>
            <param name="currentStage">The current stage the progress is reported for.</param>
            <param name="total">The total progress of the index rebuild.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.ProgressReport.#ctor">
            <summary>
            Initializes the instance of the <see cref="T:Sitecore.Xdb.Collection.Indexing.ProgressReport"/> class.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ProgressReport.Total">
            <summary>
            Gets value of estimated total progress of the index rebuild.
            <remarks>The value is in range from 0 to 1.</remarks>
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.ProgressReport.CurrentStage">
            <summary>
            Gets value of progress of the current stage.
            <remarks>The value is in range from 0 to 1.</remarks>
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.RebuildState">
            <summary>
            Defines states of the rebuild process.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.RebuildState.Default">
            <summary>
            Default state when no rebuild is being performed.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.RebuildState.RebuildRequested">
            <summary>
            The rebuild requested state. It is used to signal that the index rebuild should be started.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.RebuildState.Starting">
            <summary>
            Defines a state for initial preparation stage.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.RebuildState.RebuildingExistingData">
            <summary>
            Defines a state when all the data is being indexed using data extraction.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.RebuildState.RebuildingIncomingChanges">
            <summary>
            Defines a state when the index rebuild process tries to rebuild the incoming data that have been added during the previous stage.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.RebuildState.Finishing">
            <summary>
            Defines a state for post-rebuild steps.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.RebuildState.Finished">
            <summary>
            Defines a state when all rebuild activities have finished.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.RebuildStatus">
            <summary>
            Defines a class that keeps all the needed information to report about the status of the current rebuild process.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.RebuildStatus.#ctor(Sitecore.Xdb.Collection.Indexing.RebuildState,Sitecore.Xdb.Collection.Indexing.ProgressReport,System.DateTime)">
            <summary>
            Initializes the instance of the <see cref="T:Sitecore.Xdb.Collection.Indexing.RebuildStatus"/> class.
            </summary>
            <param name="state">The state of the rebuild process.</param>
            <param name="progressReport">Information about the progress of the rebuild process.</param>
            <param name="lastUpdated">Timestamp of the last rebuild status update.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.RebuildStatus.#ctor(Sitecore.Xdb.Collection.Indexing.RebuildState)">
            <summary>
            Initializes the instance of the <see cref="T:Sitecore.Xdb.Collection.Indexing.RebuildStatus"/> class.
            </summary>
            <param name="state">The state of the rebuild process.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.RebuildStatus.State">
            <summary>
            Gets value that indicates the current state of the rebuild process.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.RebuildStatus.ProgressReport">
            <summary>
            Gets value that contains information about progress of the current rebuild process.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.RebuildStatus.LastUpdated">
            <summary>
            Gets value of when the rebuild status was updated.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.RebuildStatusChangedEventArgs">
            <summary>
            Event arguments for <see cref="M:Sitecore.Xdb.Collection.Indexing.IRebuildStatusChangedListener.OnRebuildStatusChangedAsync(System.Object,Sitecore.Xdb.Collection.Indexing.RebuildStatusChangedEventArgs)"/>.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.RebuildStatusChangedEventArgs.RebuildStatus">
            <summary>
            Gets value indicating progress of the current rebuild process.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.RebuildStatusChangedEventArgs.#ctor(Sitecore.Xdb.Collection.Indexing.RebuildStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Sitecore.Xdb.Collection.Indexing.RebuildStatusChangedEventArgs"/> class.
            </summary>
            <param name="rebuildStatus">The rebuild status.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.RevolvingIndexer">
            <summary>
            Provides indexing capabilities by utilizing <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexer"/>, reading ahead data while the previous one is being indexed.
            </summary>
            <remarks>
            This implementation runs data retrieving ahead of time, while the previous data is being indexed. 
            So by the time it finishes with indexing, the next set to index will already be ready.
            It runs not more than 2 threads of data preparation and indexing is happening always sequentially,
            which preserves data consistency.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.RevolvingIndexer.#ctor(Sitecore.Xdb.Collection.Indexing.IIndexer,Microsoft.Extensions.Logging.ILogger{Sitecore.Xdb.Collection.Indexing.RevolvingIndexer},Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Indexing.RevolvingIndexer"/>.
            </summary>
            <param name="indexer">The <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexer"/> used to index new data.</param>
            <param name="logger">The logger.</param>
            <param name="settings">Indexer settings. <see cref="T:Sitecore.Xdb.Collection.Indexing.RevolvingIndexer"/></param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.RevolvingIndexer.AsyncIndexingOfNextChanges(Sitecore.Xdb.Collection.Indexing.IIndexer,Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Index the next set of changes after <paramref name="currentToken"/>.
            </summary>
            <param name="indexer">The indexer.</param>
            <param name="currentToken">The token indicating the data that has previously been indexed, or <c>null</c> to start from <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.GetDataCurrentlyIndexedToken"/>.</param>
            <returns>The new token that includes the indexed changes.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.EntityType">
            <summary>
            Represents a type of entity in xdb, also referred to as the main record.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.EntityType.Contact">
            <summary>
            Indicates the entity is a contact.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.EntityType.Interaction">
            <summary>
            Indicates the entity is an interaction.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Indexing.EntityType.DeviceProfile">
            <summary>
            Indicates the entity is a device profile.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.ISchemaReader">
            <summary>
            Provides read only access to the xdb schema.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.ISchemaReader.GetAllFacetKeys(Sitecore.Xdb.Collection.Indexing.EntityType)">
            <summary>
            Gets a list of all the facet keys included in all schema versions.
            </summary>
            <param name="entityType">The type of the entity with the associated facet keys.</param>
            <returns>The list of facet keys.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.DecoratedIndexer">
            <summary>
            An <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexer"/> implementation that applies decoration with cross cutting concerns.
            </summary>
            <remarks>
            Applies performance counters to <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexer"/> operations by decorating index reader, index writer and data provider.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.DecoratedIndexer.#ctor(Sitecore.Xdb.Collection.IDataProvider,Sitecore.Xdb.Collection.Indexing.IIndexWriter,Sitecore.Xdb.Collection.Indexing.IIndexReader,Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters,Sitecore.Xdb.Collection.Indexing.ISchemaReader,Sitecore.Xdb.Collection.Indexing.IndexerSettings)">
            <summary>
            Initializes a new instance of the class that decorates data provider, index writer and index reader.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="indexWriter">The index writer.</param>
            <param name="indexReader">The index reader.</param>
            <param name="counters">The performance counters.</param>
            <param name="schemaReader">A schema reader to retrieve information of the configured xdb schema.</param>
            <param name="indexerSettings">The indexer related settings.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.DecoratedIndexer.GetChanges(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Gets the changed record ids to index not already in the specified <paramref name="syncToken"/>.
            </summary>
            <param name="syncToken">The sync token indicating the data that has previously been indexed, or <c>null</c> to start from <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.GetDataCurrentlyIndexedToken"/>.</param>
            <returns>The set of changed record ids.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.DecoratedIndexer.Index(Sitecore.Xdb.Collection.ChangedRecordIds)">
            <summary>
            The set of changed record ids to write to the index.
            </summary>
            <param name="changedIds">The changed ids.</param>
            <exception cref="T:System.ArgumentNullException">The specified <paramref name="changedIds"/> was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.DecoratedIndexer.SignalChangesHaveBeenIndexed(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Signals all changed records have been indexed, so the token associated to the index for search reflect this.
            </summary>
            <param name="token">The non-<c>null</c> token indicating all changed ids have been indexed.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.DecoratedIndexer.GetDataCurrentlyIndexedToken">
            <summary>
            Gets a token that represents all currently indexed data, or <c>null</c> if no changed ids has been indexed.
            </summary>
            <remarks>
            This token is *not* immediately refreshed after <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.Index(Sitecore.Xdb.Collection.ChangedRecordIds)"/> and <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.SignalChangesHaveBeenIndexed(Sitecore.Xdb.Collection.ISyncToken)"/> are called.
            There may be a delay that depends on multiple factors, including indexing technology and system configuration.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer">
             <summary>
             Provides indexing capabilities by utilizing <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexer"/>.
             </summary>
            <remarks>Indexing is done in a single threaded fashion and should not be invoked more than once.
             If <see cref="M:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer.RunInThread(System.Threading.CancellationToken)"/> is called multiple times, then the same data wil be indexed.
             It violates the purpose of the class and causes a peformance penalty.
             </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer.#ctor(Sitecore.Xdb.Collection.Indexing.IIndexer,Microsoft.Extensions.Logging.ILogger{Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer},Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer"/>.
            </summary>
            <param name="indexer">The <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexer"/> used to index new data.</param>
            <param name="logger">The logger.</param>
            <param name="settings">Indexer settings. <see cref="T:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings"/></param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer.RunInThread(System.Threading.CancellationToken)">
            <summary>
            Executes indexing in caller's thread context.
            The method does not throw in case of exceptions, but rather logs any error and retries indexing.
            The indexing can be stopped by the caller.
            </summary>
            <param name="token"><see cref="T:System.Threading.CancellationToken"/> that is used to stop indexing operation.</param>
            <returns>The indexing task.</returns>
            <seealso cref="T:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer"/>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings">
            <summary>
            Contains configuration settings for <see cref="T:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexer"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="frequency">Specifies a delay between indexing iterations.</param>
            <param name="delayAfterError">Specifies a delay before indexing is resumed if an error occurs.</param>
            <param name="delayAfterRecurringError">Specifies a delay before indexing is resumed.
            The setting is used if the number of errors since last succesfful indexing reached <see cref="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.RecurringErrorThreshold"/>.</param>
            <param name="recurringErrorThreshold">Specifies an error count that will trigger a delay of <see cref="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.DelayAfterRecurringError"/>.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="frequency"/> or <paramref name="delayAfterError"/> or <paramref name="delayAfterRecurringError"/> has negative duration.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="recurringErrorThreshold"/> is less than zero.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="options">The IConfiguration object parameter is used by dependency injection to pass a runtime setting configuration object</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.Frequency">
            <summary>
            Gets a value indicating how often the indexer should poll the data provider for changes.
            </summary>
            <remarks>
            Normally this value should be set in milliseconds, such as 100 milliseconds.
            Note that if the system is very busy, it will wait until finishing indexing the current set of changes before polling the data provider for the next set.        
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.DelayAfterError">
            <summary>
            Gets a delay before indexing is resumed if an error occurs.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.DelayAfterRecurringError">
            <summary>
            Gets a delay before indexing is resumed. It is used if the number of errors since last succesfful indexing reached <see cref="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.RecurringErrorThreshold"/>.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.RecurringErrorThreshold">
            <summary>
            Gets an error count that will trigger a delay of <see cref="P:Sitecore.Xdb.Collection.Indexing.SingleThreadedIndexerSettings.DelayAfterRecurringError"/>.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IIndexer">
            <summary>
            Contains logic used for indexing.
            </summary>
            <remarks>
            If <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.Index(Sitecore.Xdb.Collection.ChangedRecordIds)"/> or <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.SignalChangesHaveBeenIndexed(Sitecore.Xdb.Collection.ISyncToken)"/> throw an unexpected exception,
            the caller must use <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.GetDataCurrentlyIndexedToken"/>
            which represents the latest indexed data. 
            
            Indexing must then be resumed from there,
            even if more changed ids had been previously written and the corresponding tokens succesfully signaled.
            
            The above is critical as it would otherwise lead to inconsistent data
            during automated or manual error recovery.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexer.GetChanges(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Gets the changed record ids to index not already in the specified <paramref name="syncToken"/>.
            </summary>
            <param name="syncToken">The sync token indicating the data that has previously been indexed, or <c>null</c> to start from <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.GetDataCurrentlyIndexedToken"/>.</param>
            <returns>The set of changed record ids.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexer.Index(Sitecore.Xdb.Collection.ChangedRecordIds)">
            <summary>
            The set of changed ids to write to the index.
            </summary>
            <param name="changedIds">The changed ids.</param>
            <exception cref="T:System.ArgumentNullException">The specified <paramref name="changedIds"/> was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexer.SignalChangesHaveBeenIndexed(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Signals all changed records have been indexed, so the token associated to the index for search reflect this.
            </summary>
            <param name="token">The non-<c>null</c> token indicating all changed records have been indexed.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexer.GetDataCurrentlyIndexedToken">
            <summary>
            Gets a token that represents all currently indexed data, or <c>null</c> if no changed records has been indexed.
            </summary>
            <remarks>
            This token is *not* immediately refreshed after <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.Index(Sitecore.Xdb.Collection.ChangedRecordIds)"/> and <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.SignalChangesHaveBeenIndexed(Sitecore.Xdb.Collection.ISyncToken)"/> are called.
            There may be a delay that depends on multiple factors, including indexing technology and system configuration.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IIndexReader">
            <summary>
            Provides read capability to the index.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexReader.GetDataCurrentlyIndexedToken">
            <summary>
            Gets a token that represents all currently indexed data.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexReader.SearchContacts(Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Searches the indexed contacts returning the ids for the matching contacts.
            </summary>
            <param name="searchQuery">The search query.</param>
            <returns>the list of contact ids</returns>
            <remarks>Search provider must implement all supported <see cref="T:Sitecore.XConnect.Search.Queries.QueryNodeType"/>s used by <see cref="T:Sitecore.XConnect.Search.Queries.PredicateNode"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
             <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Contacts"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/> contains a node that's not supported</exception> 
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexReader.SearchInteractions(Sitecore.XConnect.Search.Queries.SearchQuery)">
            <summary>
            Searches the indexed interactions returning the ids for the matching contacts.
            </summary>
            <param name="searchQuery">The search query.</param>
            <returns>the list of contact ids</returns>
            <remarks>Search provider must implement all supported <see cref="T:Sitecore.XConnect.Search.Queries.QueryNodeType"/>s used by <see cref="T:Sitecore.XConnect.Search.Queries.PredicateNode"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
             <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Interactions"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/> contains a node that's not supported</exception> 
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IIndexWriter">
            <summary>
            Provides write capability to the index.
            </summary>
            <remarks>
            If any of the methods called in the writer throws an unexpected exception,
            the caller must use <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexReader.GetDataCurrentlyIndexedToken"/>
            which represents the latest indexed data. 
            
            Indexing must then be resumed from there,
            even if more changes had been previously written and the corresponding tokens successfully signaled.
            
            The above is critical as it would otherwise lead to inconsistent data
            during automated or manual error recovery.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexWriter.Write(Sitecore.Xdb.Collection.Indexing.ChangedDataRecords)">
            <summary>
            The set of changes to write to the index.
            </summary>
            <param name="changes">The changes.</param>
            <exception cref="T:System.ArgumentNullException">The specified <paramref name="changes"/> was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IIndexWriter.SignalChangesHaveBeenWritten(System.Byte[])">
            <summary>
            Signals all changes have been indexed, so the token associated to the index for search reflect this.
            </summary>
            <param name="token">The token indicating all changes have been indexed.</param>
            <remarks>
            Note to implementers:
            It is the responsibility of the writer implementation, to make sure the token won't be available to be read before the changes previously written are.
            This allows clients to wait until the token is available (by checking against <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexReader.GetDataCurrentlyIndexedToken"/>), 
            to make sure the query they issue will see all changes they have previously written to xdb.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.Indexer">
            <summary>
            Contains default logic used for indexing.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.Indexer.#ctor(Sitecore.Xdb.Collection.IDataProvider,Sitecore.Xdb.Collection.Indexing.IIndexWriter,Sitecore.Xdb.Collection.Indexing.IIndexReader,Sitecore.Xdb.Collection.Indexing.ISchemaReader,Sitecore.Xdb.Collection.Indexing.IndexerSettings)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="dataProvider">The data provider.</param>
            <param name="indexWriter">The index writer.</param>
            <param name="indexReader">The index reader.</param>
            <param name="schemaReader">A schema reader to retrieve information of the configured xdb schema.</param>
            <param name="indexerSettings">The indexer related settings.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.Indexer.GetChanges(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Gets the changed record ids to index not already in the specified <paramref name="syncToken"/>.
            </summary>
            <param name="syncToken">The sync token indicating the data that has previously been indexed, or <c>null</c> to start from <see cref="M:Sitecore.Xdb.Collection.Indexing.Indexer.GetDataCurrentlyIndexedToken"/>.</param>
            <returns>The set of changed record ids.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.Indexer.Index(Sitecore.Xdb.Collection.ChangedRecordIds)">
            <summary>
            The set of changed ids to write to the index.
            </summary>
            <param name="changedIds">The changed ids.</param>
            <exception cref="T:System.ArgumentNullException">The specified <paramref name="changedIds"/> was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.Indexer.SignalChangesHaveBeenIndexed(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Signals all changed records have been indexed, so the token associated to the index for search reflect this.
            </summary>
            <param name="token">The non-<c>null</c> token indicating all changed records have been indexed.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.Indexer.GetDataCurrentlyIndexedToken">
            <summary>
            Gets a token that represents all currently indexed data.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.Indexer.GetChangedDataRecords(Sitecore.Xdb.Collection.IDataProvider,Sitecore.Xdb.Collection.Indexing.IndexerSettings,Sitecore.Xdb.Collection.Indexing.ChangedIds,Sitecore.Xdb.Collection.InteractionExpandOptions,Sitecore.Xdb.Collection.EntityExpandOptions)">
            <remarks>
            When a known contact becomes anonymous and <see cref="P:Sitecore.Xdb.Collection.Indexing.IndexerSettings.IndexAnonymousContactData"/> is <c>false</c>,
            the contact will be deleted from the index. The system will also issue deletes for anonymous contacts that got an identifier deleted.
            While that's an unnecessary extra load in the index, there is a performance trade off between 
            what change tracking needs to detect vs. the extra deletes the index needs to handle 
            cases where an already anonymous contact got an identifier deleted.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.Indexer.WriteAbortingOnSyncFailures(System.Threading.CancellationTokenSource,Sitecore.Xdb.Collection.Indexing.ChangedDataRecords)">
            <remarks>
            This method ensures that after a failure in the synchronous part of <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexWriter.Write(Sitecore.Xdb.Collection.Indexing.ChangedDataRecords)"/>,
            the indexer will already be retrying the next time it calls <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexWriter.Write(Sitecore.Xdb.Collection.Indexing.ChangedDataRecords)"/>.
            
            A provider postponing actions can use the above assurance to properly ensure all ongoing actions are aborted and the indexer properly
            retries based on the current <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexReader.GetDataCurrentlyIndexedToken"/> in the index.
            Without the assurance this method provides, the <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexWriter"/> has no way of determining
            if the next call of <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexWriter.Write(Sitecore.Xdb.Collection.Indexing.ChangedDataRecords)"/> is the indexer moving forward or retrying earlier changes.
            
            This assurance, although used by the azure search provider, may change in the future, so it's not part of the public contracts.
            When doing so we may introduce mecanisms that make the indexer aware of postponed actions or at least allow the provider to signal
            the failure in a way that provides the same guarantee.
            Another alternative that might be used is for the calls to <see cref="T:Sitecore.Xdb.Collection.Indexing.IIndexWriter"/> to include information that allows
            to determine the indexer is moving forward or retrying earlier changes.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Indexing.IndexerExtensions">
            <summary>
            Makes some common indexing scenarios easier.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Indexing.IndexerExtensions.IndexNextChangesSimple(Sitecore.Xdb.Collection.Indexing.IIndexer,Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Index the next set of changes after <paramref name="currentToken"/>.
            </summary>
            <param name="indexer">The indexer.</param>
            <param name="currentToken">The token indicating the data that has previously been indexed, or <c>null</c> to start from <see cref="M:Sitecore.Xdb.Collection.Indexing.IIndexer.GetDataCurrentlyIndexedToken"/>.</param>
            <returns>The new token that includes the indexed changes.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.ChangeBase">
            <summary>
            Indicates a type of change that has been done to a specific main record or facet.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ChangeBase.#ctor(Sitecore.Xdb.Collection.ChangeType,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.ChangeBase"/>.
            </summary>
            <param name="changeType">The type of the change.</param>
            <param name="facetKey">The key of the facet that changed or <c>null</c> for main record changes.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangeBase.ChangeType">
            <summary>
            Gets the type of the change detected for the record.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangeBase.FacetKey">
            <summary>
            Gets the key of the facet that change or <c>null</c> for main record changes.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangeBase.IsFacetChange">
            <summary>
            Gets a value indicating whether this instance is a facet change.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.ChangedRecordIds">
            <summary>
            A set of <see cref="T:Sitecore.Xdb.Collection.ChangeBase"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ChangedRecordIds.#ctor(System.Collections.Generic.IEnumerable{Sitecore.Xdb.Collection.ChangeBase},Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="recordChanges">the changes to specific records/facets.</param>
            <param name="syncToken">the new <see cref="T:Sitecore.Xdb.Collection.ISyncToken"/> after the changes are included.</param>
            <exception cref="T:System.ArgumentNullException">One of the arguments was null.</exception>
            <remarks>
            The following types of changes must be passed in <paramref name="recordChanges"/>:
            <see cref="T:Sitecore.Xdb.Collection.ContactChange"/> and <see cref="T:Sitecore.Xdb.Collection.InteractionChange"/>.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangedRecordIds.RecordChanges">
            <summary>
            Gets the detailed list of record changes.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangedRecordIds.SyncToken">
            <summary>
            Gets a new sync token that includes all the changes in this instance.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangedRecordIds.DeletedContactIds">
            <summary>
            Gets all the deleted contact ids, not including contacts that were added again in this same result set.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangedRecordIds.DeletedInteractionIds">
            <summary>
            Gets all the deleted interaction ids grouped by contact id, not including interactions that were added again in this same result set.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangedRecordIds.ChangedContactIds">
            <summary>
            Gets all the added and updated contact ids, not including contacts that ended up being deleted in this same result set.
            </summary>
            <remarks>
            Any changes to identifiers is also considered a change to the contact, 
            since from the indexing point of view the identifiers are part of the contact.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangedRecordIds.ChangedInteractionIds">
            <summary>
            Gets all the added and updated interaction ids grouped by contact id, not including contacts that ended up being deleted in this same result set.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangedRecordIds.ContactIdsWithUpdatedIdentifiers">
            <summary>
            Gets all the contact ids that had any type of identifiers added/deleted.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.ChangeSet">
            <summary>Contains a set of <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> changes that is processed by <see cref="T:Sitecore.Xdb.Collection.IRepository"/>.</summary>
             <remarks>
             When updating specific records, such as the <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord" />, <see cref="T:Sitecore.Xdb.Collection.Model.FacetDataRecord" /> or
             <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord" />, all the information in the record must be provided. That is, if you save a
             record in the changed state with only the id, the appropiate concurrency token
             and only 1 property set, then it will replace any existing data when it is saved.
             This does not apply to related records, so facets and interactions does not need to be provided when updating a
             contact or interaction.
             The change set must not have duplicate records or facets being updated/deleted, such as 2 ContactDataRecord
             updating the same contact or one updating and the other deleting it.
             Contact id in interaction records must match the id of the contact that interactions belong to.
             </remarks>      
        </member>
        <member name="M:Sitecore.Xdb.Collection.ChangeSet.#ctor(System.Collections.Generic.IEnumerable{Sitecore.Xdb.Collection.Model.ContactDataRecord},System.Collections.Generic.IEnumerable{Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord})">
            <summary>
            Creates an instance of <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> with specified contacts and device profiles.
            </summary>
            <param name="contacts"><see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/>s to be included in the change set.</param>
            <param name="deviceProfiles"><see cref="T:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord"/>s to be included in the change set.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="contacts"/> or <paramref name="deviceProfiles"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Either <paramref name="contacts"/> or <paramref name="deviceProfiles"/> contains a null entry.</exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangeSet.Contacts">
            <summary>
            Contains unique <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/>s that need to be inserted, modified or deleted.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ChangeSet.DeviceProfiles">
            Contains unique <see cref="T:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord"/>s that need to be inserted, modified or deleted.
        </member>
        <member name="M:Sitecore.Xdb.Collection.ChangeSet.ValidateAfterSave(Sitecore.Xdb.Collection.SaveResult)">
            <summary>
            Validates the change set, adding <see cref="M:Sitecore.Xdb.Collection.Failures.SaveFailure.System(Sitecore.Xdb.Collection.Failures.RepositoryException)"/> failures to <paramref name="result"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ChangeSet.EnsureValid(System.String)">
            <summary>
            Validates the change set, throwing an <see cref="T:System.ArgumentException"/> if validation fails.
            </summary>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException">When the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> is no built according to its rules. Check the summary and remarks of <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> for more information.</exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.ChangeType">
            <summary>
            The type of the change.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.ChangeType.Added">
            <summary>
            Indicates the record was added.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.ChangeType.Updated">
            <summary>
            Indicates the record was updated.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.ChangeType.Deleted">
            <summary>
            Indicates the record was deleted.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ConditionExtensions.DoesNotContainNullOrEmpty``1(Sitecore.Framework.Conditions.ConditionValidator{``0})">
            <summary>
            Checks whether all the values are not null or empty.
            An exception is thrown otherwise.
            </summary>
            <param name="validator">The <see cref="T:Sitecore.Framework.Conditions.ConditionValidator`1" /> that holds the value that has to be checked.</param>
            <returns>The specified <paramref name="validator" /> instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <see cref="F:Sitecore.Framework.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator" /> contains null or empty entries.</exception>
            <exception cref="T:Sitecore.Framework.Conditions.PostconditionException">Thrown when the <see cref="F:Sitecore.Framework.Conditions.ConditionValidator`1.Value">Value</see> of the specified <paramref name="validator" /> contains null or empty entries, while the specified <paramref name="validator" /> is created using the <see cref="M:Sitecore.Framework.Conditions.Condition.Ensures``1(``0,System.String)">Ensures</see> extension method.</exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.ContactChange">
            <summary>
            Indicates a type of change that has been done to a contact or one of its facets.
            </summary>
            <remarks>
            The only reason the main <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> may be <see cref="F:Sitecore.Xdb.Collection.ChangeType.Updated"/> is when its identifiers have changed.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ContactChange.#ctor(System.Guid,Sitecore.Xdb.Collection.ChangeType,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.ContactChange"/>.
            </summary>
            <param name="id">The id of the contact</param>
            <param name="changeType">The type of the change.</param>
            <param name="facetKey">The key of the facet that changed or <c>null</c> for main record changes.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ContactChange.#ctor(System.Guid,Sitecore.Xdb.Collection.ChangeType)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.ContactChange"/>, representing the main record changed.
            </summary>
            <param name="id">The id of the contact</param>
            <param name="changeType">The type of the change.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ContactChange.Id">
            <summary>
            Gets the id of the contact.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.DataProviderCountersDecorator">
            <summary>
            A decorator that adds performance counters to <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
            </summary>
            <remarks>
            All calls are forwarded to the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/> being decorated.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.#ctor(Sitecore.Xdb.Collection.IDataProvider,Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters)">
            <summary>
            Initializes a decorator for the specified <paramref name="dataProvider"/>.
            </summary>
            <param name="dataProvider">The decorated data provider.</param>
            <param name="counters">The performance counters.</param>
            <exception cref="T:System.ArgumentNullException">Any of constructor parameters are <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.CreateSyncToken(System.Byte[])">
            <summary>
            Creates a new sync token based on <paramref name="value"/>.
            </summary>
            <param name="value">The bytes previously obtained via <see cref="M:Sitecore.Xdb.Collection.ISyncToken.ToBytes"/> of an instance returned by the same <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.</param>
            <returns>The sync token.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.CreateInteractionCursor(Sitecore.Xdb.Collection.Export.InteractionExportFilter)">
            <summary>
            Creates a cursor that can be used to iterate the interactions as defined by the specified options.
            </summary>
            <param name="filter">The filter to limit the set of exported interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> to retrieve exported interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.CreateContactCursor">
            <summary>
            Creates a cursor that can be used to iterate the contacts.
            </summary>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> to retrieve exported contacts.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.CreateInteractionCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBytes">The bytes representing <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/>.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> created from <paramref name="cursorBytes"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.CreateContactCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBytes">The bytes representing <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/>.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> created from <paramref name="cursorBytes"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.SplitInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the interaction cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor" /> should be split.</param>
            <returns>
            An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult" />.
            </returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.SplitContactCursor(Sitecore.Xdb.Collection.Export.ICursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the contact cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.ICursor" /> should be split.</param>
            <returns>
            An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult" />.
            </returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.ReadInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,System.Int32,Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Reads the specified number of interactions from the cursor.
            Interactions are roughly sorted descending by their StartDateTime.
            </summary>
            <param name="cursor">The cursor to read interactions from.</param>
            <param name="count">The count of interactions to read.</param>
            <param name="expandOptions">The expand options for the loaded interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.ReadContactCursor(Sitecore.Xdb.Collection.Export.ICursor,System.Int32,Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Reads the specified number of contacts from the cursor.
            </summary>
            <param name="cursor">The cursor to read contacts from.</param>
            <param name="count">The count of contacts to read.</param>
            <param name="expandOptions">The expand options for the loaded contacts.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadContactCursorResult"/> that contains read contacts.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.GetChanges(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Returns all changes since the specified <paramref name="syncToken"/>.
            </summary>
            <param name="syncToken">The sync token.</param>
            <returns>The changes.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.GetContactsById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the contacts with the specified ids.
            </summary>
            <param name="contactIds">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.GetContactsByIdentifier(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the contacts with the specified identifiers.
            </summary>
            <param name="identifiers">The identifiers.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.GetDeviceProfilesById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the device profiles with the specified ids.
            </summary>
            <param name="deviceProfileIds">The device profile ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/> that only contains the device profiles that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.GetInteractionsById(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.InteractionIdsByContactId},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.
            </summary>
            <param name="interactionIdsByContact">The list of <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.GetInteractionsForContacts(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions)">
            <summary>
            Gets latest <see cref="P:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions.Limit"/> interactions that meet the filters in <see cref="T:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions"/> that belong to the specified contact ids.
            </summary>
            <param name="contactIds">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions"/> controlling which interactions to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DataProviderCountersDecorator.Save(Sitecore.Xdb.Collection.ChangeSet)">
            <summary>
            Saves the changes in the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/>.
            </summary>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.SaveResult"/> that includes any failed changes.</returns>
            <remarks>Performance counters were added to the consumer of <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/> instead. <alsosee cref="T:Sitecore.Xdb.Collection.RepositoryCountersDecorator"/></remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.DecoratedRepository">
             <summary>
             An <see cref="T:Sitecore.Xdb.Collection.IRepository"/> implementation that applies decoration with cross cutting concerns.
             </summary>
             <remarks>
             Applies performance counters to the repository via a decorator.
            
             When using the public constructor it provides a repository implementation that uses
             an <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>. The data provider is also decorated.
             </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.#ctor(Sitecore.Xdb.Collection.RepositorySettings,Sitecore.Xdb.Collection.IDataProvider,Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters,Sitecore.Xdb.Collection.Indexing.IIndexReader)">
            <summary>
            Initializes a new instance that decorates the default repository and the data provider.
            </summary>
            <param name="config">The <see cref="T:Sitecore.Xdb.Collection.RepositorySettings"/>.</param>
            <param name="provider">The provider.</param>
            <param name="counters">The performance counters.</param>
            <param name="indexReader">The index reader.</param>
            <exception cref="T:System.ArgumentNullException">Any of constructor parameters are <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.#ctor(Sitecore.Xdb.Collection.IRepository,Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters)">
            <summary>
            Initializes a new instance that decorates the default repository and the data provider.
            </summary>
            <param name="repository">The repository to be decorated.</param>
            <param name="counters">The performance counters.</param>
            <exception cref="T:System.ArgumentNullException">Any of constructor parameters are <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.GetContactsById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Gets all the contacts with the specified ids. Increments relevant counters.
            </summary>
            <param name="contactIds">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.GetContactsByIdentifier(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey},Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Gets all the contacts with the specified identifiers. Increments relevant counters.
            </summary>
            <param name="identifiers">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.GetInteractions(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.InteractionIdsByContactId},Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>. Increments relevant counters.
            </summary>
            <param name="interactionIdsByContact">The list of <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.GetDeviceProfiles(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.DeviceProfileExpandOptions)">
            <summary>
            Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>. Increments relevant counters.
            </summary>
            <param name="deviceProfileIds">The device profile ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/> that only contains the interactions that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.Save(Sitecore.Xdb.Collection.ChangeSet)">
            <summary>
            Saves the changes in the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/>. Increments relevant counters.
            </summary>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.SaveResult"/> that includes any failed changes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="changes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">When the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> is no built according to its rules. Check the summary and remarks of <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> for more information.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.SearchContacts(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Gets all contacts that that match the specified search query. Increments relevant counters.
            </summary>
            <param name="searchQuery">The query to be executed against search index.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>An instances of <see cref="T:Sitecore.Xdb.Collection.Search.ContactSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> that match the given <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
             <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Contacts"/>.</exception>
            <exception cref="T:System.NotSupportedException">when <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.SearchInteractions(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.InteractionExpandOptions)">
             <summary>
             Gets all interactions that match the specified search query.
             </summary>
             <param name="searchQuery">The query predicate to be executed against search index.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.InteractionExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>An instances of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/> that match the given <paramref name="searchQuery"/>.</returns>
             <remarks>
             Changes saved with <see cref="M:Sitecore.Xdb.Collection.IRepository.Save(Sitecore.Xdb.Collection.ChangeSet)"/> are not available immediately to be searched.
            
             Use <see cref="M:Sitecore.Xdb.Collection.IRepository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)"/> to wait for the data to become available.
            
             Search provider must implement all supported <see cref="T:Sitecore.XConnect.Search.Queries.QueryNodeType"/>s.
             </remarks>
             <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
             <exception cref="T:System.NotSupportedException">when <paramref name="searchQuery"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)">
            <summary>
            Waits for search to have the data represented by <paramref name="dataToBeSearchable"/>. Increments relevant counters.
            </summary>
            <param name="dataToBeSearchable">a token representing the data we are waiting to become available to search.</param>
            <param name="timeout">indicates how long it will be waited for data to become available.</param>
            <returns><c>true</c> if the data is available to search, <c>false</c> if we waited more than <paramref name="timeout"/> and the data was still not available to be searched.</returns>        /// <returns></returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="dataToBeSearchable"/> is <c>null</c></exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.CreateSyncToken(System.Byte[])">
            <summary>
            Creates a new sync token based on <paramref name="value"/>.
            </summary>
            <param name="value">The bytes previously obtained via <see cref="M:Sitecore.Xdb.Collection.ISyncToken.ToBytes"/> of an instance returned by the same <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>. Value cannot be null.</param>
            <returns>The sync token.</returns>
            <remarks>
            Note to implementers:
            Design the token in a way that prevent breaking changes to the upper layer.
            For example, by including a version in the bytes that can be used to map to new internal representations of the token as new versions of the data provider get released.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.CreateInteractionCursor(Sitecore.Xdb.Collection.Export.InteractionExportFilter)">
            <summary>
            Creates a cursor that can be used to iterate the interactions as defined by the specified options.
            </summary>
            <param name="options">The options for interaction extraction.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor" /> that can be used to iterate over the interaction.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.CreateContactCursor">
            <summary>
            Creates a cursor that can be used to iterate the contacts.
            </summary>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor" /> that can be used to iterate over the contact.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.CreateInteractionCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing interactions cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.CreateContactCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing contacts cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.SplitInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the interaction cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor" /> should be split.</param>
            <returns>
            An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult" />.
            </returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.SplitContactCursor(Sitecore.Xdb.Collection.Export.ICursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the contact cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.ICursor" /> should be split.</param>
            <returns>
            An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult" />.
            </returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.ReadInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,System.Int32,Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Reads the specified number of interactions from the cursor.
            </summary>
            <param name="cursor">The cursor to read interactions from.</param>
            <param name="count">The count fo interactions to read.</param>
            <param name="expandOptions">The expand options for the loaded interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.ReadContactCursor(Sitecore.Xdb.Collection.Export.ICursor,System.Int32,Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Reads the specified number of contacts from the cursor.
            </summary>
            <param name="cursor">The cursor to read contacts from.</param>
            <param name="count">The count of contacts to read.</param>
            <param name="expandOptions">The expand options for the loaded contacts.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadContactCursorResult"/> that contains read contacts.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DecoratedRepository.Decorate(Sitecore.Xdb.Collection.IRepository,Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters)">
            <summary>
            Decorates the specified repository.
            </summary>
            <param name="repository">The repository to decorate.</param>
            <param name="counters">The <see cref="T:Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters"/> to use for the performance counters of the decorated type.</param>
            <returns>The decorated repository.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.InteractionChange">
            <summary>
            Indicates a type of change that has been done to an interaction or one of its facets.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.InteractionChange.#ctor(System.Guid,System.Guid,Sitecore.Xdb.Collection.ChangeType,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.InteractionChange"/>.
            </summary>
            <param name="id">The id of the interaction.</param>
            <param name="contactId">The id of the contact that owns the interaction.</param>
            <param name="changeType">The type of the change.</param>
            <param name="facetKey">The key of the facet that changed or <c>null</c> for main record changes.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.InteractionChange.#ctor(System.Guid,System.Guid,Sitecore.Xdb.Collection.ChangeType)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.InteractionChange"/>, representing the main record changed.
            </summary>
            <param name="id">The id of the interaction.</param>
            <param name="contactId">The id of the contact that owns the interaction.</param>
            <param name="changeType">The type of the change.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.InteractionChange.Id">
            <summary>
            Gets the id of the interaction.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.InteractionChange.ContactId">
            <summary>
            Gets the id of the contact that owns the interaction.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey">
            <summary>
            Defines properties of <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey.#ctor(System.Byte[],System.String)">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey"/> class.
            </summary>
            <param name="identifier">The contact identifier.</param>
            <param name="source">The source where contact identifier originates from.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey.Source">
            <summary>
            Indicates where contact identifier originates from.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey.GetIdentifier">
            <summary>
            Indicates contact identifier.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.IdentifierChangeState">
            <summary>
            Indicates the state of <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord"/> during a Save operation.
            It signals the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/> how contact identifier records should be processed.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.IdentifierChangeState.Unchanged">
            <summary>
            <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord"/>s having this state will not be processed.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.IdentifierChangeState.New">
            <summary>
            <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord"/>s having this state will be created.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.IdentifierChangeState.Deleted">
            <summary>
            <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord"/>s having this state will be deleted.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.ChangeState">
            <summary>
            Indicates the state of <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> during a Save operation.
            It signals the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/> how each data record should be processed.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.ChangeState.Unchanged">
            <summary>
            <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/>s having this state will not be processed.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.ChangeState.Changed">
            <summary>
            <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/>s having this state will be updated.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.ChangeState.New">
            <summary>
            <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/>s having this state will be created.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.ChangeState.Delete">
            <summary>
            <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/>s having this state will be deleted.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.FacetContent">
            <summary>
            Defines facet content data used by <see cref="T:Sitecore.Xdb.Collection.Model.FacetDataRecord"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.FacetContent.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Model.FacetContent"/>.
            </summary>
            <param name="data">Data to be stored in the facet.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="data"/>is null.</exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.FacetContent.Data">
            <summary>
            Content associated with the facet.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.FacetContent.FromObject``1(``0)">
            <summary>
            Converts given object into <see cref="T:Sitecore.Xdb.Collection.Model.FacetContent"/>.
            </summary>
            <typeparam name="T">Type of the object containting facet data.</typeparam>
            <param name="instance">Data to be included in new <see cref="T:Sitecore.Xdb.Collection.Model.FacetContent"/> object.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Model.FacetContent"/> that contains provided data.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="instance"/> is not a valid <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="instance"/> is null.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.FacetContent.ToObject``1">
             <summary>
             Converts <see cref="T:Sitecore.Xdb.Collection.Model.FacetContent"/>'s data into the object of specified type.
             </summary>
             <typeparam name="TObject">Object type to convert to.</typeparam>
             <returns>Object of specified type.</returns>
            <exception cref="T:System.ArgumentException">If conversion to <see><cref>TObject</cref></see>was not possible.</exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.ContactDataRecord">
            <summary>
            Contains main contact data and data related to it.
            </summary>
            <remarks>
            <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> for general information on records on this API.
            
            Thread Safety: any instance members are not guaranteed to be thread safe.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactDataRecord.#ctor">
            <summary>
            Creates a record for a new contact
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactDataRecord.#ctor(System.Guid,Sitecore.Xdb.Collection.Model.ChangeState)">
            <summary>
            Creates a record for a contact
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactDataRecord.Created">
            <summary>
            DateTime when the data record was created.
            </summary>
            <exception cref="T:System.ArgumentException">The value did not explicitely had the <see cref="F:System.DateTimeKind.Utc"/></exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactDataRecord.Identifiers">
            <remarks>
            Contact identifiers are unique in the system,
            so different 2 contacts must not share the same identifier.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactDataRecord.Interactions">
            <summary>
            A collection of interactions belonging to the contact.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactDataRecord.Stub(System.Guid)">
            <summary>
            Returns an <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.Unchanged" /> contact record
            that can be used to pass changes related to the contact
            when there are no other changes being done in the main contact record.
            </summary>
            <param name="contactId">The contact id</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord" /></returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactDataRecord.AddIdentifier(Sitecore.Xdb.Collection.Model.ContactIdentifierRecord)">
            <summary>
            Add contact identifier for the contact.
            </summary>
            <param name="identifier">The contact identifier</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord">
            <summary>
            Defines properties of <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> identifier.
            </summary>
            <remarks>
            <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord"/> for general information on records on this API.
            Thread Safety: any instance members are not guaranteed to be thread safe.
            </remarks>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord._key">
            <summary>
            The contact identifier record key.
            </summary>
        </member>
        <member name="F:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord._contact">
            <summary>
            The contact the identifier belongs to.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord.#ctor(Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey)">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord"/> class.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord.Contact">
            <summary>
            Gets the contact the identifier belongs to.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord.IdentifierType">
            <summary>
            The type of the identifier.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord.Source">
            <summary>
            Indicates where contact identifier originates from.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord.State">
            <summary>
            The contact identifier record <see cref="T:Sitecore.Xdb.Collection.Model.IdentifierChangeState"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.ContactIdentifierRecord.GetIdentifier">
            <summary>
            Indicates contact identifier.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.DataRecord">
            <summary>
            Base class for data record.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.DataRecord.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> class.
            </summary>
            <remarks>
            Thread Safety: any instance members are not guaranteed to be thread safe.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.DataRecord.ConcurrencyToken">
            <summary>
            Token helps to prevent concurrency issues when stale copy of <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> is updated.
            Token's value has to match the value found in the datastore before update or delete operation can be executed.
            </summary>
            <remarks>Value is ignored for records with <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.New"/>.</remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.DataRecord.Facets">
            <summary>
            Facets associate with the data record.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.DataRecord.Id">
            <summary>
            Unique identifier of data record.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.DataRecord.LastModified">
            <summary>
            DateTime when the data record was last modified.
            </summary>
            <exception cref="T:System.ArgumentException">The value did not explicitely had the <see cref="F:System.DateTimeKind.Utc"/></exception>    
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.DataRecord.State">
            <summary>
            The data record <see cref="T:Sitecore.Xdb.Collection.Model.ChangeState"/>.      
            </summary>
            <remarks>
            It does not get updated after <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> is processed by data store.
            E.g., when a new data record is saved, the state is not changed from <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.New"/> to <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.Unchanged"/>.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord">
            <summary>
            Defines data record for device profile.
            </summary>
            <remarks>
            <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> for general information on records on this API.
            
            Thread Safety: any instance members are not guaranteed to be thread safe.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord.#ctor(System.Guid)">
            <summary>
            Creates a record for a new device profile.
            </summary>
            <param name="deviceProfileId">The id for the device profile</param>
            <remarks>
            Unlike for <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> that get an id generated after <see cref="M:Sitecore.Xdb.Collection.IRepository.Save(Sitecore.Xdb.Collection.ChangeSet)"/> is called,
            the <paramref name="deviceProfileId"/> specified is the one used when saving new device profiles.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord.#ctor(System.Guid,Sitecore.Xdb.Collection.Model.ChangeState)">
            <summary>
            Creates a record for a device profile.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord.#ctor">
            <summary>
            Creates a record for a new device profile without id.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord.LastKnownContactId">
            <summary>
            Id of the last contact associated with the device.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord.Stub(System.Guid)">
            <summary>
            Returns an <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.Unchanged" /> device profile record
            that can be used to pass changes related to the interaction
            when there are no other changes being done in the main interaction record.
            </summary>
            <param name="deviceProfileId">The device profile id</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord" /></returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.FacetDataRecord">
            <summary>
            A record with the information for a facet. 
            </summary>
            <remarks>
            <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> for general information on records on this API.
            
            Thread Safety: any instance members are not guaranteed to be thread safe.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.FacetDataRecord.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.Model.FacetDataRecord"/> with <see cref="P:Sitecore.Xdb.Collection.Model.FacetDataRecord.State"/> set to <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.New"/>.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.FacetDataRecord.ConcurrencyToken">
            <summary>
            Token helps to prevent concurrency issues when stale copy of <see cref="T:Sitecore.Xdb.Collection.Model.FacetDataRecord"/> is updated.
            Token's value has to match the value found in the datastore before update or delete operation can be executed.
            </summary>
            <remarks>Value is ignored for records with <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.New"/>.</remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.FacetDataRecord.Content">
            <summary>
            Actual data of the facet.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value is <c>null</c>.</exception>    
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.FacetDataRecord.LastModified">
            <summary>
            DateTime when the data record was last modified.
            </summary>
            <exception cref="T:System.ArgumentException">The value did not explicitely had the <see cref="F:System.DateTimeKind.Utc"/></exception>    
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.FacetDataRecord.State">
            <summary>
            The facet data record <see cref="T:Sitecore.Xdb.Collection.Model.ChangeState"/>.      
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord">
             <summary>
             A record with the information for an interaction of a contact.
             </summary>
             <remarks>
             <see cref="T:Sitecore.Xdb.Collection.Model.DataRecord"/> for general information on records on this API.
            
             Thread Safety: any instance members are not guaranteed to be thread safe.
             </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.InteractionDataRecord.#ctor">
            <summary>
            Creates a record for a new interaction.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.InteractionDataRecord.#ctor(System.Guid,Sitecore.Xdb.Collection.Model.ChangeState)">
            <summary>
            Creates a record for an interaction.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.CampaignId">
            <summary>
            Gets or sets the campaign id to associate to the interaction.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.ChannelId">
            <summary>
            Gets or sets the channel id to associate to the interaction.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.ContactId">
            <summary>
            Gets or sets the id of the contact the interaction belongs to.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.Created">
            <summary>
            DateTime when the data record was created.
            </summary>
            <exception cref="T:System.ArgumentException">The value did not explicitely had the <see cref="F:System.DateTimeKind.Utc"/></exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.DeviceProfileId">
            <summary>
            Gets or sets the id of the device profile used during the interaction.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.EndDateTime">
            <summary>
            Gets or sets the estimated time when the interaction ended.
            </summary>
            <value>A <see cref="T:System.DateTime"/> with <see cref="F:System.DateTimeKind.Utc"/></value>
            <exception cref="T:System.ArgumentException">The value did not explicitely had the <see cref="F:System.DateTimeKind.Utc"/></exception>
            <remarks>
            When unspecified, the value of this field is <see cref="F:System.DateTime.MinValue"/> with the Utc kind.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.Duration">
            <summary>
            Specifies the duration of an interaction.  This is a calculated field based on StartDateTime and EndDateTime.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.EngagementValue">
            <summary>
            Gets or sets the engagement value of the interaction.
            </summary>
            <value>An integer greater than or equal to 0.</value>
            <exception cref="T:System.ArgumentException">A negative value was received. Use a value greater or equal to 0.</exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.Events">
            <summary>
            Gets the events of the interaction.
            </summary>
            <remarks>
            Adding events while enumerating the collection returned by this property is not supported.
            Use <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/> in such scenario.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.Initiator">
            <summary>
            Gets or sets a value representing the initiator.
            </summary>
            <value>An integer greater than or equal to 0.</value>
            <exception cref="T:System.ArgumentException">A negative value was received. Use a value greater or equal to 0.</exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.StartDateTime">
            <summary>
            Gets or sets the time the interaction started.
            </summary>
            <value>A <see cref="T:System.DateTime"/> with <see cref="F:System.DateTimeKind.Utc"/></value>
            <exception cref="T:System.ArgumentException">The value did not explicitely had the <see cref="F:System.DateTimeKind.Utc"/></exception>
            <remarks>
            When unspecified, the value of this field is <see cref="F:System.DateTime.MinValue"/> with the Utc kind.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.UserAgent">
            <summary>
            Gets or sets the user agent used during the interaction.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Model.InteractionDataRecord.VenueId">
            <summary>
            Gets or sets the venue id.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.InteractionDataRecord.Stub(System.Guid)">
            <summary>
            Returns an <see cref="F:Sitecore.Xdb.Collection.Model.ChangeState.Unchanged" /> interaction record
            that can be used to pass changes related to the interaction
            when there are no other changes being done in the main interaction record.
            </summary>
            <param name="interactionId">The interaction id</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord" /></returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Model.InteractionDataRecord.AddEvents(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            Adds the specified events to the interaction.
            </summary>
            <param name="events">The list of events</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="events"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="events"/> contains null values</exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.IdSearchResult">
            <summary>
            A specific contact search result that includes <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.IdSearchResult.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.IdSearchResult"/>.
            </summary>
            <param name="value">The id to be returned as search result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.ContactSearchResult">
            <summary>
            A specific contact search result that includes <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.ContactSearchResult.#ctor(Sitecore.Xdb.Collection.Model.ContactDataRecord)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.ContactSearchResult"/>.
            </summary>
            <param name="value">The contact data record to be returned as search result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.ContactSearchResults">
            <summary>
            Contains a set of <see cref="T:Sitecore.Xdb.Collection.Search.ContactSearchResult"/>s found by search. <seealso cref="T:Sitecore.Xdb.Collection.Search.SearchResults`1"/>
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.ContactSearchResults.#ctor(System.Int64,System.Collections.Generic.IAsyncEnumerator{Sitecore.Xdb.Collection.Search.ContactSearchResult},System.Collections.ObjectModel.ReadOnlyCollection{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.ContactSearchResults"/>.
            </summary>
            <param name="totalHits">Total number of founds contacts.</param>
            <param name="hits"><see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> that provides search results.</param>
            <param name="pagingCursor">The cursor pointing after the returned result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.IdSearchResults">
            <summary>
            Contains a set of ids found by search. <seealso cref="T:Sitecore.Xdb.Collection.Search.SearchResults`1"/>
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.IdSearchResults.#ctor(System.Int64,System.Collections.Generic.IAsyncEnumerator{Sitecore.Xdb.Collection.Search.IdSearchResult},System.Collections.ObjectModel.ReadOnlyCollection{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.IdSearchResults"/>.
            </summary>
            <param name="totalHits">Total number of founds ids.</param>
            <param name="hits"><see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> that provides search results.</param>
            <param name="pagingCursor">The cursor pointing after the returned result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.InteractionContactId">
            <summary>
            Container class for interaction search results. The class is used as parameter for <see cref="T:Sitecore.Xdb.Collection.Search.SearchResult`1"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.InteractionContactId.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="interactionId">The interaction id to be used in search result.</param>
            <param name="contactId">The contact id to be used in search result.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Search.InteractionContactId.InteractionId">
            <summary>
            Gets interaction id.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Search.InteractionContactId.ContactId">
            <summary>
            Gets contact id.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.InteractionIdSearchResult">
            <summary>
            A specific interaction search result that includes <see cref="T:Sitecore.Xdb.Collection.Search.InteractionContactId"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.InteractionIdSearchResult.#ctor(Sitecore.Xdb.Collection.Search.InteractionContactId)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionIdSearchResult"/>.
            </summary>
            <param name="value">The <see cref="T:Sitecore.Xdb.Collection.Search.InteractionContactId"/> instance to be returned as search result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.InteractionIdSearchResults">
            <summary>
            Contains a set of interaction and contact ids found by search. <seealso cref="T:Sitecore.Xdb.Collection.Search.SearchResults`1"/>
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.InteractionIdSearchResults.#ctor(System.Int64,System.Collections.Generic.IAsyncEnumerator{Sitecore.Xdb.Collection.Search.InteractionIdSearchResult},System.Collections.ObjectModel.ReadOnlyCollection{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionIdSearchResults"/>.
            </summary>
            <param name="totalHits">Total number of founds interactions.</param>
            <param name="hits"><see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> that provides search results.</param>
            <param name="pagingCursor">The cursor pointing after the returned result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.InteractionSearchResult">
            <summary>
            A specific interaction search result that includes <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.InteractionSearchResult.#ctor(Sitecore.Xdb.Collection.Model.InteractionDataRecord)">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionSearchResult"/>.
            </summary>
            <param name="value">The interaction data record to be returned as search result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.InteractionSearchResults">
            <summary>
            Contains a set of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionSearchResult"/>s found by search. <seealso cref="T:Sitecore.Xdb.Collection.Search.SearchResults`1"/>
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.InteractionSearchResults.#ctor(System.Int64,System.Collections.Generic.IAsyncEnumerator{Sitecore.Xdb.Collection.Search.InteractionSearchResult},System.Collections.ObjectModel.ReadOnlyCollection{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionSearchResults"/>.
            </summary>
            <param name="totalHits">Total number of founds intearctions.</param>
            <param name="hits"><see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> that provides search results.</param>
            <param name="pagingCursor">The cursor pointing after the returned result.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.SearchResult`1">
            <summary>
            A specific result that may include additional metadata.
            </summary>
            <typeparam name="TResult">the type of result.</typeparam>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.SearchResult`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="value">the actual result.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Search.SearchResult`1.Value">
            <summary>
            Gets the value of the search result.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Search.SearchResults`1">
            <summary>
            A set of results for the overal search response.
            </summary>
            <typeparam name="THit">The type of results.</typeparam>
            <remarks>
            This instance does not support multiple enumeration.
            
            Disposing this instance will dispose any underlying connection/stream 
            used to retrieve the results when enumerating.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Search.SearchResults`1.TotalHits">
            <summary>
            Amount of records that matched the search.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Search.SearchResults`1.Hits">
            <summary>
            The matched search results.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.Search.SearchResults`1.PagingCursor">
            <summary>
            Gets the cursor to retrieve the next page of search results, or <c>null</c> if cursor paging was not requested via the <see cref="T:Sitecore.XConnect.Search.Queries.SearchQuery" />
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.SearchResults`1.#ctor(System.Int64,System.Collections.Generic.IAsyncEnumerator{`0},System.Collections.ObjectModel.ReadOnlyCollection{System.Byte})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="totalHits">the amount of results that matched the search.</param>
            <param name="hits">the actual results.</param>
            <param name="pagingCursor">The cursor pointing after the returned result.</param>
            <remarks>
            <paramref name="hits"/> gets disposed when the calling code enumerated it,
            otherwise it gets dispose with this instance.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.SearchResults`1.Dispose">
            <summary>Disposes any resources used by the search results.</summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.SearchResults`1.Dispose(System.Boolean)">
            <summary>Disposes any resources used by the search results.</summary>
            <param name="disposing">Indicates if the instance should be disposed.</param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Search.SearchResults`1.GetEnumerator">
            <summary>Gets an asynchronous enumerator with the results.</summary>
            <returns>The <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.RepositoryCountersDecorator">
            <summary>
            A decorator that adds performance counters to <see cref="T:Sitecore.Xdb.Collection.IRepository"/>.
            </summary>
            <seealso cref="T:Sitecore.Xdb.Collection.IRepository"/>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.#ctor(Sitecore.Xdb.Collection.IRepository,Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters)">
            <summary>
            Initializes a decorator for the specified <paramref name="repository"/>.
            </summary>
            <param name="repository">The wrapped repository,</param>
            <param name="counters">The performance counters.</param>
            <remarks>
            All calls to <paramref name="repository"/> are decorated with calls to appropriate counters from <paramref name="counters"/>.
            </remarks>
            <seealso cref="T:Sitecore.XConnect.Diagnostics.Telemetry.IPerformanceCounters"/>
            <exception cref="T:System.ArgumentNullException">Any of constructor parameters are <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.GetContactsById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Gets all the contacts with the specified ids. Increments relevant counters.
            </summary>
            <param name="contactIds">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.GetContactsByIdentifier(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey},Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Gets all the contacts with the specified identifiers. Increments relevant counters.
            </summary>
            <param name="identifiers">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.GetInteractions(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.InteractionIdsByContactId},Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>. Increments relevant counters.
            </summary>
            <param name="interactionIdsByContact">The list of <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.GetDeviceProfiles(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.DeviceProfileExpandOptions)">
            <summary>
            Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>. Increments relevant counters.
            </summary>
            <param name="deviceProfileIds">The device profile ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/> that only contains the interactions that were found.</returns>
            <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.Save(Sitecore.Xdb.Collection.ChangeSet)">
            <summary>
            Saves the changes in the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/>. Increments relevant counters.
            </summary>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.SaveResult"/> that includes any failed changes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="changes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">When the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> is no built according to its rules. Check the summary and remarks of <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> for more information.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.SearchContacts(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.ContactExpandOptions)">
             <summary>
             Gets all contacts that that match the specified search query. Increments relevant counters.
             </summary>
             <param name="searchQuery">The query to be executed against search index.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>An instances of <see cref="T:Sitecore.Xdb.Collection.Search.ContactSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> that match the given <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/>.</returns>
             <remarks>
             Changes saved with <see cref="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.Save(Sitecore.Xdb.Collection.ChangeSet)"/> are not available immediately to be searched.
            
             Use <see cref="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)"/> to wait for the data to become available.
             </remarks>
             <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
              <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Contacts"/>.</exception>
             <exception cref="T:System.NotSupportedException">when <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.SearchInteractions(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.InteractionExpandOptions)">
             <summary>
             Gets all interactions that match the specified search query.
             </summary>
             <param name="searchQuery">The query to be executed against search index.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.InteractionExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/> that match the given <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/>.</returns>
             <remarks>
             Changes saved with <see cref="M:Sitecore.Xdb.Collection.IRepository.Save(Sitecore.Xdb.Collection.ChangeSet)"/> are not available immediately to be searched.
            
             Use <see cref="M:Sitecore.Xdb.Collection.IRepository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)"/> to wait for the data to become available.
            
             Search provider must implement all supported <see cref="T:Sitecore.XConnect.Search.Queries.QueryNodeType"/>s.
             </remarks>
             <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
              <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Interactions"/>.</exception>
             <exception cref="T:System.NotSupportedException">when <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)">
            <summary>
            Waits for search to have the data represented by <paramref name="dataToBeSearchable"/>. Increments relevant counters.
            </summary>
            <param name="dataToBeSearchable">a token representing the data we are waiting to become available to search.</param>
            <param name="timeout">indicates how long it will be waited for data to become available.</param>
            <returns><c>true</c> if the data is available to search, <c>false</c> if we waited more than <paramref name="timeout"/> and the data was still not available to be searched.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="dataToBeSearchable"/> is <c>null</c></exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.CreateSyncToken(System.Byte[])">
            <summary>
            Creates a new sync token based on <paramref name="value"/>.
            </summary>
            <param name="value">The bytes previously obtained via <see cref="M:Sitecore.Xdb.Collection.ISyncToken.ToBytes"/> of an instance returned by the same <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>. Value cannot be null.</param>
            <returns>The sync token.</returns>
            <remarks>
            Note to implementers:
            Design the token in a way that prevent breaking changes to the upper layer.
            For example, by including a version in the bytes that can be used to map to new internal representations of the token as new versions of the data provider get released.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.CreateInteractionCursor(Sitecore.Xdb.Collection.Export.InteractionExportFilter)">
            <summary>
            Creates a cursor that can be used to iterate the interactions as defined by the specified filter.
            </summary>
            <param name="options">The options for interaction extraction.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor" /> that can be used to iterate over the interaction.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.CreateContactCursor">
            <summary>
            Creates a cursor that can be used to iterate the contacts.
            </summary>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor" /> that can be used to iterate over the contact.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.CreateInteractionCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing interactions cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.CreateContactCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing contacts cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.SplitInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the interaction cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor" /> should be split.</param>
            <returns>
            An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult" />.
            </returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.SplitContactCursor(Sitecore.Xdb.Collection.Export.ICursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the contact cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.ICursor" /> should be split.</param>
            <returns>
            An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult" />.
            </returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.ReadInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,System.Int32,Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Reads the specified number of interactions from the cursor.
            </summary>
            <param name="cursor">The cursor to read interactions from.</param>
            <param name="count">The count of interactions to read.</param>
            <param name="expandOptions">The expand options for the loaded interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositoryCountersDecorator.ReadContactCursor(Sitecore.Xdb.Collection.Export.ICursor,System.Int32,Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Reads the specified number of contacts from the cursor.
            </summary>
            <param name="cursor">The cursor to read contacts from.</param>
            <param name="count">The count of contacts to read.</param>
            <param name="expandOptions">The expand options for the loaded contacts.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read contacts.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.DeviceProfileExpandOptions">
            <summary>
                Defines what data to include when <see cref="T:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord" />s are loaded from xDB.
            </summary>
            <seealso cref="T:Sitecore.Xdb.Collection.EntityExpandOptions" />
        </member>
        <member name="M:Sitecore.Xdb.Collection.DeviceProfileExpandOptions.#ctor">
            <summary>
            Options indicating no facets will be loaded when returning the entities.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DeviceProfileExpandOptions.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Options indicating the facets the system will return (if found) when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="facetKeys"/> contained <see cref="F:System.String.Empty"/> or <c>null</c> entries</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.DeviceProfileExpandOptions.#ctor(Sitecore.Xdb.Collection.FacetKeysCollection)">
            <summary>
            Options indicating the facets the system will return (if found) when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="facetKeys"/> was <c>null</c></exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.DictionaryByReference`2">
            <summary>
            An <see cref="T:System.Collections.Generic.Dictionary`2"/> where the keys are only the same if those point to the same instance/object. 
            </summary>
            <typeparam name="TKey">The type of the dictionary key.</typeparam>
            <typeparam name="TValue">The type of the value stored in the dictionary.</typeparam>
        </member>
        <member name="T:Sitecore.Xdb.Collection.FacetKeysCollection">
            <summary>
            Represents a collection of keys for facets of an entity (such as contacts, interactions and device profiles).
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.FacetKeysCollection.#ctor">
            <summary>
            Creates an empty collection of facets keys.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.FacetKeysCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a collection with the specified facets keys.
            </summary>
            <param name="facetKeys">The list of facets keys</param>
            <exception cref="T:System.ArgumentException">Any of the entries in <paramref name="facetKeys"/> contained an empty string</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.FacetKeysCollection.GetEnumerator">
            <summary>
            Implements the <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.FacetKeysCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements the <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.FacetKeysCollection.Add(System.String)">
            <summary>
            Adds the specified facet key to the collection.
            </summary>
            <param name="facetKey">The facet key.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="facetKey"/> is empty string</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="facetKey"/> is null</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.FacetKeysCollection.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified facet key to the collection.
            </summary>
            <param name="facetKeys">The facet keys.</param>
            <exception cref="T:System.ArgumentException">Any of the entries in <paramref name="facetKeys"/> contained an empty or null string</exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.GetContactsResult">
            <summary>
            A <see cref="T:Sitecore.Xdb.Collection.GetRecordsResult`1"/> for <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.GetContactsResult.#ctor(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactDataRecord})">
            <summary>
            Initializes a new instance containing the specified <paramref name="records" />.
            </summary>
            <param name="records">the records.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult">
            <summary>
            A <see cref="T:Sitecore.Xdb.Collection.GetRecordsResult`1"/> for <see cref="T:Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.GetDeviceProfilesResult.#ctor(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.DeviceProfileDataRecord})">
            <summary>
            Initializes a new instance containing the specified <paramref name="records" />.
            </summary>
            <param name="records">the records.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.GetInteractionsResult">
            <summary>
            A <see cref="T:Sitecore.Xdb.Collection.GetRecordsResult`1"/> for <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/>.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.GetInteractionsResult.#ctor(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.InteractionDataRecord})">
            <summary>
            Initializes a new instance containing the specified <paramref name="records" />.
            </summary>
            <param name="records">the records.</param>
        </member>
        <member name="T:Sitecore.Xdb.Collection.GetRecordsResult`1">
            <summary>
            A subset of records of type <typeparamref name="T"/> being read from the <see cref="T:Sitecore.Xdb.Collection.IRepository"/>.
            </summary>
            <remarks>
            For performance reasons, the results of a get operation to retrieve records are divided in multiple subsets.
            This class represents one of such subsets.
            </remarks>    
        </member>
        <member name="M:Sitecore.Xdb.Collection.GetRecordsResult`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance containing the specified <paramref name="records" />.
            </summary>
            <param name="records">The records.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.GetRecordsResult`1.Records">
            <summary>
            Gets the records in this subset of results.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.InteractionExpandOptions">
            <summary>
                Defines what data to include when <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord" />s are loaded from xDB.
            </summary>
            <seealso cref="T:Sitecore.Xdb.Collection.EntityExpandOptions" />
        </member>
        <member name="M:Sitecore.Xdb.Collection.InteractionExpandOptions.#ctor">
            <summary>
            Options indicating no facets will be loaded when returning the entities.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.InteractionExpandOptions.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Options indicating the facets the system will return (if found) when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="facetKeys"/> contained <see cref="F:System.String.Empty"/> or <c>null</c> entries</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.InteractionExpandOptions.#ctor(Sitecore.Xdb.Collection.FacetKeysCollection)">
            <summary>
            Options indicating the facets the system will return (if found) when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="facetKeys"/> was <c>null</c></exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.InteractionIdsByContactId">
            <summary>
            Contains contact id and interaction ids associated with it. It is used as parameter class when querying for interactions.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.InteractionIdsByContactId.#ctor(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>
            </summary>
            <param name="contactId">Id of the contact to get interations for.</param>
            <param name="interactionIds">Ids of interactions to retrieve.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="interactionIds"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if <paramref name="contactId"/> is an empty Guid or <paramref name="interactionIds"/> is emtpy of <paramref name="interactionIds"/> contains a Guid.Empty.</exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.InteractionIdsByContactId.ContactId">
            <summary>
            Id of the contact to get interations for.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.InteractionIdsByContactId.InteractionIds">
            <summary>
            Ids of interactions to retrieve.
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.ISyncToken">
            <summary>
            An immutable token that can be used to identify the changes that has already been processed by a part of the system. 
            </summary>
            <remarks>
            Implementations of this interface must be immutable.
            
            An example use case for a token, is to check whether the system has already indexed a set of changes that have been saved.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ISyncToken.ToBytes">
            <summary>
            Returns a <see cref="T:System.Byte"/> array representation of this token.
            </summary>
            <returns>The non-<c>null</c> <see cref="T:System.Array"/> of <see cref="T:System.Byte"/></returns>
            <remarks>
            Always returns a new copy of the bytes.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ISyncToken.Merge(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Combines both sync tokens, so that waiting on the resulting value is equivalent to waiting for both sync tokens separately.
            </summary>
            <param name="syncToken">The sync token to merge with this instance.</param>
            <returns>The non-<c>null</c> combined sync token.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ISyncToken.IsUpToDate(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Checks whether this instance has all the changes indicated by <paramref name="token"/>.
            </summary>
            <param name="token">The token that indicates the changes to check.</param>
            <returns><c>true</c> if the current instance has all the changes indicated by <paramref name="token"/></returns>
            <remarks>
            Tokens may have multiple dimensions, such as a value per shard indicating what changes we already have for the branch.
            In such a case, the current instance is only considered to be up to date with <paramref name="token"/>, 
            if it already has the changes for *all* the shards/dimensions of the the other token.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.RecordFacetFailures">
            <summary>
            Defines data to be returned as part of <see cref="T:Sitecore.Xdb.Collection.SaveResult"/> after completing Save operation.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RecordFacetFailures.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,Sitecore.Xdb.Collection.Failures.SaveFailure})">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.RecordFacetFailures"/>
            </summary>
            <param name="failures"><see cref="T:Sitecore.Xdb.Collection.Failures.SaveFailure"/>s that occured while saving data record's facets</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RecordFacetFailures.Failures">
            <summary>
            Failures that occured while saving data record's facets
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions">
            <summary>
            Options to control which interactions to return when reading entities that relate to many interactions, for example contacts.
            </summary>
            <remarks>
            <see cref="P:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions.Limit"/> defaults to 0, so no interactions are loaded by default. Set the property to indicate how many related interactions to load.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions.#ctor(System.Int64)">
            <summary>
            Options indicating no facets will be loaded when returning the entities.
            </summary>
            <param name="limit">the amount of related interactions to load</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions.Start">
            <summary>
            Gets or sets an Utc <see cref="T:System.DateTime"/> indicating that only interactions with a start date greater or equal to the <paramref name="value"/> must be returned.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified <paramref name="value"/> is not in the Utc format</exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions.End">
            <summary>
            Gets or sets an Utc <see cref="T:System.DateTime"/> indicating that only interactions with a start date less than or equal to the <paramref name="value"/> must be returned.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified <paramref name="value"/> is not in the Utc format</exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions.Limit">
            <summary>
            Gets or sets a value indicating to load the latest <paramref name="value"/> interactions per each entity, for example: the latest 10 interactions for every contact.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified <paramref name="value"/> is not in the Utc format</exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.IDataProvider">
             <summary>
             An implementation that allows to store and retrieve entities from a physical store.
             </summary>
             <remarks>
             This interface is used by the <see cref="T:Sitecore.Xdb.Collection.Repository"/>.
             The main concern of the data provider is the permanent storage of the
             information, and to allowing the retrieval of the information by id.
             For interactions, it also must support the retrieval based on
             contact ids and the options specified in <see cref="T:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions"/>.
            
             From the consuming side, code in the service layer must be used,
             instead of direct calls to the <see cref="T:Sitecore.Xdb.Collection.IRepository"/> or the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
             </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.GetContactsById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the contacts with the specified ids.
            </summary>
            <param name="contactIds">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.GetContactsByIdentifier(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the contacts with the specified identifiers.
            </summary>
            <param name="identifiers">The identifiers.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.GetInteractionsById(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.InteractionIdsByContactId},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.
            </summary>
            <param name="interactionIdsByContact">The list of <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.GetDeviceProfilesById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Gets all the device profiles with the specified ids.
            </summary>
            <param name="deviceProfileIds">The device profile ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/> that only contains the device profiles that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.GetInteractionsForContacts(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions)">
            <summary>
            Gets latest <see cref="P:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions.Limit"/> interactions that meet the filters in <see cref="T:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions"/> that belong to the specified contact ids.
            </summary>
            <param name="contactIds">The contact ids.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.RelatedInteractionsExpandOptions"/> controlling which interactions to retrieve.</param>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.Save(Sitecore.Xdb.Collection.ChangeSet)">
            <summary>
            Saves the changes in the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/>.
            </summary>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.SaveResult"/> that includes any failed changes.</returns>
            <remarks>
                The data provider updates the id and concurrency token in the instances passed in <paramref name="changes" /> for the
                succesfully added records.
                When updates are succesfull, the concurrency token is replaced with the new one in the corresponding instance.
                The data provider does not have restrictions when adding/updating facets for a previously saved interaction,
                as it is only higher layers of the system that constraint the modification of interactions that have already been
                submitted for aggregation.
                Notes to inheritors: while we will advise consumers to avoid sending really large amount of changes,
                the data provider must be prepared to take in large sets. When necessary this may mean splitting the changes
                when storing those in the physical stores.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.GetChanges(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Returns all changes since the specified <paramref name="syncToken"/>.
            </summary>
            <param name="syncToken">The sync token, or <c>null</c> to start from the beginning.</param>
            <returns>The changes.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.CreateSyncToken(System.Byte[])">
            <summary>
            Creates a new sync token based on <paramref name="value"/>.
            </summary>
            <param name="value">The bytes previously obtained via <see cref="M:Sitecore.Xdb.Collection.ISyncToken.ToBytes"/> of an instance returned by the same <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>. Value cannot be null.</param>
            <returns>The sync token.</returns>
            <remarks>
            Note to implementers:
            Design the token in a way that prevent breaking changes to the upper layer.
            For example, by including a version in the bytes that can be used to map to new internal representations of the token as new versions of the data provider get released.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.CreateInteractionCursor(Sitecore.Xdb.Collection.Export.InteractionExportFilter)">
            <summary>
            Creates a cursor that can be used to iterate the interactions as defined by the specified options.
            </summary>
            <param name="filter">The filter to limit the set of exported interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> to retrieve exported interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.CreateContactCursor">
            <summary>
            Creates a cursor that can be used to iterate the contacts.
            </summary>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> to retrieve exported interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.CreateInteractionCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBytes">The bytes representing <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/>.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> created from <paramref name="cursorBytes"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.CreateContactCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBytes">The bytes representing <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/>.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> created from <paramref name="cursorBytes"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.SplitInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the interaction cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> should be split.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.SplitContactCursor(Sitecore.Xdb.Collection.Export.ICursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the contact cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> should be split.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.ReadInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,System.Int32,Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Reads the specified number of interactions from the cursor.
            Interactions are roughly sorted descending by their StartDateTime.
            </summary>
            <param name="cursor">The cursor to read interactions from.</param>
            <param name="count">The count of interactions to read.</param>
            <param name="expandOptions">The expand options for the loaded interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IDataProvider.ReadContactCursor(Sitecore.Xdb.Collection.Export.ICursor,System.Int32,Sitecore.Xdb.Collection.EntityExpandOptions)">
            <summary>
            Reads the specified number of contacts from the cursor.
            </summary>
            <param name="cursor">The cursor to read contacts from.</param>
            <param name="count">The count of contacts to read.</param>
            <param name="expandOptions">The expand options for the loaded contacts.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read contacts.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.IRepository">
            <summary>
            An implementation that allows to store and retrieves entities, as well as search them.
            </summary>
            <remarks>
            From the consuming side, code in the service layer must be used,
            instead of direct calls to the <see cref="T:Sitecore.Xdb.Collection.IRepository"/> or the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.GetContactsById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.ContactExpandOptions)">
             <summary>
             Gets all the contacts with the specified ids.
             </summary>
             <param name="contactIds">The contact ids.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified contacts in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/>.
            
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="contactIds"/>.
            
             Any system failures when retrieving any of the subsets are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.GetContactsByIdentifier(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey},Sitecore.Xdb.Collection.ContactExpandOptions)">
             <summary>
             Gets all the contacts with the specified identifiers.
             </summary>
             <param name="identifiers">The contact ids.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified contacts in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/>.
            
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="identifiers"/>.
            
             Any system failures when retrieving the data are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.GetInteractions(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.InteractionIdsByContactId},Sitecore.Xdb.Collection.InteractionExpandOptions)">
             <summary>
             Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.
             </summary>
             <param name="interactionIdsByContact">The list of <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified interactions in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/>.
            
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="interactionIdsByContact"/>.
            
             Any system failures when retrieving the data are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.GetDeviceProfiles(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.DeviceProfileExpandOptions)">
             <summary>
             Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.
             </summary>
             <param name="deviceProfileIds">The device profile ids.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/> that only contains the interactions that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified device profiles in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/>.
            
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="deviceProfileIds"/>.
            
             Any system failures when retrieving the data are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.Save(Sitecore.Xdb.Collection.ChangeSet)">
            <summary>
            Saves the changes in the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/>.
            </summary>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.SaveResult"/> that includes any failed changes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="changes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">When the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> is no built according to its rules. Check the summary and remarks of <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> for more information.</exception>
            <remarks>
                The id and concurrency token in the instances passed in <paramref name="changes" /> gets updated for succesfully
                added records.
                When updates are succesfull, the concurrency token is replaced with the new one in the corresponding instance.
                The repository do not have restrictions when adding/updating facets for a previously saved interaction,
                as it is only higher layers of the system that constraint the modification of interactions that have already been
                submitted for aggregation.
                Notes to inheritors: while we will advise consumers to avoid sending really large amount of changes,
                the repository must be prepared to take in large sets.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.SearchContacts(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.ContactExpandOptions)">
             <summary>
             Gets all contacts that match the specified search query.
             </summary>
            <param name="searchQuery">The search query to be executed against search index.</param>
            <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
            <returns>
            An instance of <see cref="T:Sitecore.Xdb.Collection.Search.ContactSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> 
            that match the given <paramref name="searchQuery"/>, <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/>.
            </returns>
             <remarks>
             Changes saved with <see cref="M:Sitecore.Xdb.Collection.IRepository.Save(Sitecore.Xdb.Collection.ChangeSet)"/> are not available immediately to be searched.
            
             Use <see cref="M:Sitecore.Xdb.Collection.IRepository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)"/> to wait for the data to become available.
            
             Search provider must implement all supported <see cref="T:Sitecore.XConnect.Search.Queries.QueryNodeType"/>s.
             </remarks>
             <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
             <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Contacts"/>.</exception>
             <exception cref="T:System.NotSupportedException">when <paramref name="searchQuery"/> <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.SearchInteractions(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.InteractionExpandOptions)">
             <summary>
             Gets all interactions that match the specified search query.
             </summary>
             <param name="searchQuery">The search query to be executed against search index.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.InteractionExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>
               An instance of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/> that match the given <paramref name="searchQuery"/> <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/>.</returns>
             <remarks>
             Changes saved with <see cref="M:Sitecore.Xdb.Collection.IRepository.Save(Sitecore.Xdb.Collection.ChangeSet)"/> are not available immediately to be searched.
            
             Use <see cref="M:Sitecore.Xdb.Collection.IRepository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)"/> to wait for the data to become available.
            
             Search provider must implement all supported <see cref="T:Sitecore.XConnect.Search.Queries.QueryNodeType"/>s.
             </remarks>
             <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
              <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Interactions"/>.</exception>
             <exception cref="T:System.NotSupportedException">when <paramref name="searchQuery"/> <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)">
            <summary>
            Waits for search to have the data represented by <paramref name="dataToBeSearchable"/>.
            </summary>
            <param name="dataToBeSearchable">a token representing the data we are waiting to become available to search.</param>
            <param name="timeout">indicates how long it will be waited for data to become available.</param>
            <returns><c>true</c> if the data is available to search, <c>false</c> if we waited more than <paramref name="timeout"/> and the data was still not available to be searched.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="dataToBeSearchable"/> is <c>null</c></exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.CreateSyncToken(System.Byte[])">
            <summary>
            Creates a new sync token based on <paramref name="value"/>.
            </summary>
            <param name="value">The bytes previously obtained via <see cref="M:Sitecore.Xdb.Collection.ISyncToken.ToBytes"/> of an instance returned by the same <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>. Value cannot be null.</param>
            <returns>The sync token.</returns>
            <remarks>
            Note to implementers:
            Design the token in a way that prevent breaking changes to the upper layer.
            For example, by including a version in the bytes that can be used to map to new internal representations of the token as new versions of the data provider get released.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.CreateInteractionCursor(Sitecore.Xdb.Collection.Export.InteractionExportFilter)">
            <summary>
            Creates a cursor that can be used to iterate the interactions as defined by the specified filter.
            </summary>
            <param name="options">The options for interaction extraction.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor" /> that can be used to iterate over the interaction.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.CreateContactCursor">
            <summary>
            Creates a cursor that can be used to iterate the contacts.
            </summary>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor" /> that can be used to iterate over the contact.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.CreateInteractionCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing interactions cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.CreateContactCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing contacts cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.SplitInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the interaction cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> should be split.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.SplitContactCursor(Sitecore.Xdb.Collection.Export.ICursor,Sitecore.Xdb.Collection.Export.CursorSplitPreference)">
            <summary>
            Splits the contact cursor according to the specified preference.
            </summary>
            <param name="cursor">The cursor to split.</param>
            <param name="preference">The preferences how <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> should be split.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.SplitInteractionCursorResult"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.ReadInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,System.Int32,Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Reads the specified number of interactions from the cursor.
            </summary>
            <param name="cursor">The cursor to read interactions from.</param>
            <param name="count">The count of interactions to read.</param>
            <param name="expandOptions">The expand options for the loaded interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.IRepository.ReadContactCursor(Sitecore.Xdb.Collection.Export.ICursor,System.Int32,Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Reads the specified number of contacts from the cursor.
            </summary>
            <param name="cursor">The cursor to read contacts from.</param>
            <param name="count">The count of contacts to read.</param>
            <param name="expandOptions">The expand options for the loaded contacts.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read contacts.</returns>
        </member>
        <member name="T:Sitecore.Xdb.Collection.Repository">
             <summary>
             An implementation of <see cref="T:Sitecore.Xdb.Collection.IRepository"/> that uses an <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
             </summary>
             <remarks>
             Consuming code must always use the service layer instead of direct calls to the <see cref="T:Sitecore.Xdb.Collection.IRepository"/> or <see cref="T:Sitecore.Xdb.Collection.Repository"/>.
            
             If the repository is allowed to be used in specific extension points of the service layer,
             then the <see cref="T:Sitecore.Xdb.Collection.IRepository"/> must be used instead of <see cref="T:Sitecore.Xdb.Collection.Repository"/>.
             </remarks>
             <seealso cref="T:Sitecore.Xdb.Collection.IRepository"/>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.#ctor(Sitecore.Xdb.Collection.RepositorySettings,Sitecore.Xdb.Collection.IDataProvider,Sitecore.Xdb.Collection.Indexing.IIndexReader)">
            <summary>
            Initializes a new instance of the repository with the specified settings and the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
            </summary>
            <param name="config">The <see cref="T:Sitecore.Xdb.Collection.RepositorySettings"/>.</param>
            <param name="provider">The provider.</param>
            <param name="indexReader">The index reader.</param>
            <exception cref="T:System.ArgumentNullException">Any of constructor parameters are <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.GetContactsById(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.ContactExpandOptions)">
             <summary>
             Gets all the contacts with the specified ids.
             </summary>
             <param name="contactIds">The contact ids.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified contacts in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/>.
            
             Any system failures when retrieving the data are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
            
             The received ids are first divided in subsets of <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedFromDataProviderChunkSize"/>,
             and retrieved from the data store only one subset at a time. Only when we are done with the subset, we retrieve a new subset.
            
             The found contacts in the subset are further divided into smaller subsets of <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedChunkSize"/>.
             Depending on the <see cref="P:Sitecore.Xdb.Collection.ContactExpandOptions.InteractionsExpandOptions"/>, the related interactions
             are loaded only for each of the smaller subset at a time. These smaller subsets are what we return in
             <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>, and only when the consumer moves to the next smaller subset
             we retrieve the next related interactions.
             Once we are done with the smaller subsets, we retrieve the next set of contacts from the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="contactIds"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.GetContactsByIdentifier(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.Model.ContactIdentifierRecordKey},Sitecore.Xdb.Collection.ContactExpandOptions)">
             <summary>
             Gets all the contacts with the specified identifiers.
             </summary>
             <param name="identifiers">The contact ids.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/> that only contains the contacts that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified contacts in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetContactsResult"/>.
            
             Any system failures when retrieving the data are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
            
             The received ids are first divided in subsets of <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedFromDataProviderChunkSize"/>,
             and retrieved from the data store only one subset at a time. Only when we are done with the subset, we retrieve a new subset.
            
             The found contacts in the subset are further divided into smaller subsets of <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedChunkSize"/>.
             Depending on the <see cref="P:Sitecore.Xdb.Collection.ContactExpandOptions.InteractionsExpandOptions"/>, the related interactions
             are loaded only for each of the smaller subset at a time. These smaller subsets are what we return in
             <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>, and only when the consumer moves to the next smaller subset
             we retrieve the next related interactions.
             Once we are done with the smaller subsets, we retrieve the next set of contacts from the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="identifiers"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.GetInteractions(System.Collections.Generic.IReadOnlyCollection{Sitecore.Xdb.Collection.InteractionIdsByContactId},Sitecore.Xdb.Collection.InteractionExpandOptions)">
             <summary>
             Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.
             </summary>
             <param name="interactionIdsByContact">The list of <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> that only contains the interactions that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified interactions in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/>.
            
             Any system failures when retrieving the data are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
            
             The received ids are first divided in subsets of <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.InteractionsReturnedChunkSize"/>,
             and retrieved from the data store only one subset at a time.
             These are the <see cref="T:Sitecore.Xdb.Collection.GetInteractionsResult"/> returned from this method, and only when the consumer moves to the next subset
             we retrieve the next set of interactions from the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="interactionIdsByContact"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.GetDeviceProfiles(System.Collections.Generic.IReadOnlyCollection{System.Guid},Sitecore.Xdb.Collection.DeviceProfileExpandOptions)">
             <summary>
             Gets all the interactions for the specified list of contact ids and interaction ids <see cref="T:Sitecore.Xdb.Collection.InteractionIdsByContactId"/>.
             </summary>
             <param name="deviceProfileIds">The device profile ids.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.EntityExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>multiple instances of <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/> that only contains the interactions that were found.</returns>
             <remarks>
             Rather than loading and returning all the specified device profiles in memory, these are returned in smaller subsets represented by <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/>.
            
             Any system failures when retrieving the data are raised as an <see cref="T:System.AggregateException"/> when doing the async enumeration of the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
             In this case, no further subsets can be retrieved as the enumeration is closed and the exception is propagated.
            
             The received ids are first divided in subsets of <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.DeviceProfilesReturnedChunkSize"/>,
             and retrieved from the data store only one subset at a time.
             These are the <see cref="T:Sitecore.Xdb.Collection.GetDeviceProfilesResult"/> returned from this method, and only when the consumer moves to the next subset
             we retrieve the next set of interactions from the <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>.
             The order in which contacts are returned is not guaranteed to be the same as the order of <paramref name="deviceProfileIds"/>.
             </remarks>
             <exception cref="T:System.ArgumentNullException">If one of the arguments to the method was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.Save(Sitecore.Xdb.Collection.ChangeSet)">
            <summary>
            Saves the changes in the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/>.
            </summary>
            <returns>The <see cref="T:Sitecore.Xdb.Collection.SaveResult"/> that includes any failed changes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="changes"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">When the <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> is no built according to its rules. Check the summary and remarks of <see cref="T:Sitecore.Xdb.Collection.ChangeSet"/> for more information.</exception>
            <remarks>
            <seealso cref="M:Sitecore.Xdb.Collection.IRepository.Save(Sitecore.Xdb.Collection.ChangeSet)"/>.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.SearchContacts(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.ContactExpandOptions)">
             <summary>
             Gets all contacts that that match the specified search query.
             </summary>
             <param name="searchQuery">The query to be executed against search index.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>An instances of <see cref="T:Sitecore.Xdb.Collection.Search.ContactSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord"/> that match the given <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/>.</returns>
             <remarks>
             Changes saved with <see cref="M:Sitecore.Xdb.Collection.Repository.Save(Sitecore.Xdb.Collection.ChangeSet)"/> are not available immediately to be searched.
            
             Use <see cref="M:Sitecore.Xdb.Collection.Repository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)"/> to wait for the data to become available.
             </remarks>
             <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
              <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Contacts"/>.</exception>
             <exception cref="T:System.NotSupportedException">when <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.SearchInteractions(Sitecore.XConnect.Search.Queries.SearchQuery,Sitecore.Xdb.Collection.InteractionExpandOptions)">
             <summary>
             Gets all interactions that match the specified search query.
             </summary>
             <param name="searchQuery">The query to be executed against search index.</param>
             <param name="expandOptions">The <see cref="T:Sitecore.Xdb.Collection.InteractionExpandOptions"/> controlling what related data to retrieve.</param>
             <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Search.InteractionSearchResults"/> containing <see cref="T:Sitecore.Xdb.Collection.Model.InteractionDataRecord"/> that match the given <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/>.</returns>
             <remarks>
             Changes saved with <see cref="M:Sitecore.Xdb.Collection.Repository.Save(Sitecore.Xdb.Collection.ChangeSet)"/> are not available immediately to be searched.
            
             Use <see cref="M:Sitecore.Xdb.Collection.Repository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)"/> to wait for the data to become available.
            
             Search provider must implement all supported <see cref="T:Sitecore.XConnect.Search.Queries.QueryNodeType"/>s.
             </remarks>
             <exception cref="T:System.ArgumentNullException">when <paramref name="searchQuery"/> is <c>null</c></exception>
              <exception cref="T:System.ArgumentException"> when property <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Domain"/> of <paramref name="searchQuery"/> has value not equal to <see cref="F:Sitecore.XConnect.Search.Queries.SearchQueryDomain.Interactions"/>.</exception>
             <exception cref="T:System.NotSupportedException">when <see cref="P:Sitecore.XConnect.Search.Queries.SearchQuery.Predicate"/> of <paramref name="searchQuery"/> contains a node that's not supported by this version of the search provider.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.WaitUntilDataBecomesAvailableToSearch(Sitecore.Xdb.Collection.ISyncToken,System.TimeSpan)">
            <summary>
            Waits for search to have the data represented by <paramref name="dataToBeSearchable"/>.
            </summary>
            <param name="dataToBeSearchable">a token representing the data we are waiting to become available to search.</param>
            <param name="timeout">indicates how long it will be waited for data to become available.</param>
            <returns><c>true</c> if the data is available to search, <c>false</c> if we waited more than <paramref name="timeout"/> and the data was still not available to be searched.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="dataToBeSearchable"/> is <c>null</c></exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.CreateSyncToken(System.Byte[])">
            <summary>
            Creates a new sync token based on <paramref name="value"/>.
            </summary>
            <param name="value">The bytes previously obtained via <see cref="M:Sitecore.Xdb.Collection.ISyncToken.ToBytes"/> of an instance returned by the same <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>. Value cannot be null.</param>
            <returns>The sync token.</returns>
            <remarks>
            Note to implementers:
            Design the token in a way that prevent breaking changes to the upper layer.
            For example, by including a version in the bytes that can be used to map to new internal representations of the token as new versions of the data provider get released.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.CreateInteractionCursor(Sitecore.Xdb.Collection.Export.InteractionExportFilter)">
            <summary>
            Creates a cursor that can be used to iterate the interactions as defined by the specified filter.
            </summary>
            <param name="options">The options for interaction extraction.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor" /> that can be used to iterate over the interaction.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.CreateContactCursor">
            <summary>
            Creates a cursor that can be used to iterate the contacts.
            </summary>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor" /> that can be used to iterate over the contact.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.CreateInteractionCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing interactions cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.IInteractionCursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.CreateContactCursor(System.Byte[])">
            <summary>
            Creates a cursor from its binary representation returned by the <see cref="M:Sitecore.Xdb.Collection.Export.ICursor.GetBookmark"/> method.
            </summary>
            <param name="cursorBookmark">The bytes representing contacts cursor.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ICursor"/> created from <paramref name="cursorBookmark"/>.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.ReadInteractionCursor(Sitecore.Xdb.Collection.Export.IInteractionCursor,System.Int32,Sitecore.Xdb.Collection.InteractionExpandOptions)">
            <summary>
            Reads the specified number of interactions from the cursor.
            </summary>
            <param name="cursor">The cursor to read interactions from.</param>
            <param name="count">The count fo interactions to read.</param>
            <param name="expandOptions">The expand options for the loaded interactions.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadInteractionCursorResult"/> that contains read interactions.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.ReadContactCursor(Sitecore.Xdb.Collection.Export.ICursor,System.Int32,Sitecore.Xdb.Collection.ContactExpandOptions)">
            <summary>
            Reads the specified number of contacts from the cursor.
            </summary>
            <param name="cursor">The cursor to read contacts from.</param>
            <param name="count">The count of contacts to read.</param>
            <param name="expandOptions">The expand options for the loaded contacts.</param>
            <returns>An instance of <see cref="T:Sitecore.Xdb.Collection.Export.ReadContactCursorResult"/> that contains read contacts.</returns>
        </member>
        <member name="M:Sitecore.Xdb.Collection.Repository.ReturnInSmallerChunksAndLoadRelatedInteractions(Sitecore.Xdb.Collection.ContactExpandOptions,System.Collections.Generic.IAsyncEnumerable{Sitecore.Xdb.Collection.GetContactsResult})">
            <remarks>
                This method returns the data in chunks based on <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedChunkSize"/> and
                populates the interactions in the received contacts and returns them in smaller chunks based on <see cref="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedChunkSize" />.
            </remarks>
        </member>
        <member name="T:Sitecore.Xdb.Collection.RepositorySettings">
            <summary>
            Defines configuration settings used by <see cref="T:Sitecore.Xdb.Collection.IRepository"/>
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositorySettings.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.RepositorySettings"/>
            </summary>
            <param name="contactsReturnedFromDataProviderChunkSize">Defines size of contact chunks that are returned by <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/></param>
            <param name="contactsReturnedChunkSize">Defines size of contact chunks that are returned by <see cref="T:Sitecore.Xdb.Collection.IRepository"/></param>
            <param name="interactionsReturnedChunkSize">Defines size of interaction chunks that are returned by <see cref="T:Sitecore.Xdb.Collection.IRepository"/></param>
            <param name="deviceProfilesReturnedChunkSize">Defines size of device profiles chunks that are returned by <see cref="T:Sitecore.Xdb.Collection.IRepository"/></param>
        </member>
        <member name="M:Sitecore.Xdb.Collection.RepositorySettings.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates a new instance of <see cref="T:Sitecore.Xdb.Collection.RepositorySettings"/> using dependency injection configuration binding
            </summary>
            <param name="config">configuration object used to bind class properties to configuration options</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedFromDataProviderChunkSize">
            <summary>
            Size of contacts chunk returend by <see cref="T:Sitecore.Xdb.Collection.IDataProvider"/>
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RepositorySettings.ContactsReturnedChunkSize">
            <summary>
            Size of contacts chunk returned by <see cref="T:Sitecore.Xdb.Collection.IRepository"/>
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RepositorySettings.InteractionsReturnedChunkSize">
            <summary>
            Size of interactions chunk returned by <see cref="T:Sitecore.Xdb.Collection.IRepository"/>
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.RepositorySettings.DeviceProfilesReturnedChunkSize">
            <summary>
            Size of device profiles chunk returned by <see cref="T:Sitecore.Xdb.Collection.IRepository"/>
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.SaveResult">
            <summary>
                Defines result for modification operations within a <see cref="T:Sitecore.Xdb.Collection.ChangeSet" />.
            </summary>
            <remarks>
                The results are mapped by the actual object reference passed in the <see cref="T:Sitecore.Xdb.Collection.ChangeSet" />.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.SaveResult.#ctor(Sitecore.Xdb.Collection.ISyncToken)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="syncToken">The sync token that can be used to check all the succesful changes in the set are visible to another sub system.</param>
        </member>
        <member name="P:Sitecore.Xdb.Collection.SaveResult.DataRecordFailures">
            <summary>
                Contains all failures for main entity records, e.g. Contact, Interaction, DeviceProfile.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.SaveResult.FacetFailures">
            <summary>
                Contains failures for contact and interaction facets.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.SaveResult.ContactIdentifierFailures">
            <summary>
                Contains failures for contact identifiers.
            </summary>
        </member>
        <member name="P:Sitecore.Xdb.Collection.SaveResult.SyncToken">
            <summary>
            Gets the sync token that can be used to check all the succesful changes in the set are visible to another sub system.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.SaveResult.Add(Sitecore.Xdb.Collection.SaveResult)">
            <summary>
            Adds the results for records in <paramref name="result"/> to this instance.
            </summary>
            <param name="result">the result.</param>
            <remarks>
            This method throws if there are results for the record already in this instance.
            Use <see cref="M:Sitecore.Xdb.Collection.SaveResult.Merge(Sitecore.Xdb.Collection.SaveResult)"/> if you want new failures for existing records to be silently ignored.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> was <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">A failure for the same record already exists in this instance.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.SaveResult.Merge(Sitecore.Xdb.Collection.SaveResult)">
            <summary>
            Adds the results for records in <paramref name="result"/> that do not already have results in the instance.
            </summary>
            <param name="result">the result.</param>
            <remarks>
            Any record in <paramref name="result"/> that already has a matching result in this instance will be ignored.
            At this time, this includes ignoring facet failures for the same record but with different failed facets.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> was <c>null</c>.</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.SaveResult.Merge(Sitecore.Xdb.Collection.Model.DataRecord,Sitecore.Xdb.Collection.Failures.SaveFailure)">
            <summary>
            Adds the result for the record if it does not already has a result in the instance.
            </summary>
            <param name="record">the record.</param>
            <param name="failure">the failure to add for the record.</param>
            <remarks>
            If <paramref name="record"/> already has a result in this instance it will be ignored.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="record"/> or <paramref name="failure"/> was <c>null</c>.</exception>
        </member>
        <member name="T:Sitecore.Xdb.Collection.ContactExpandOptions">
            <summary>
                Defines what data to include when <see cref="T:Sitecore.Xdb.Collection.Model.ContactDataRecord" />s are loaded from xDB.
                <see cref="P:Sitecore.Xdb.Collection.ContactExpandOptions.InteractionsExpandOptions" /> allows interactions to be loaded with the contacts given some criteria.
            </summary>
            <seealso cref="T:Sitecore.Xdb.Collection.EntityExpandOptions" />
            <remarks>
            By default no related interactions will be returned with the contacts.
            To return related interactions, explicitely set the limit of the <see cref="P:Sitecore.Xdb.Collection.ContactExpandOptions.InteractionsExpandOptions"/> property. 
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ContactExpandOptions.#ctor">
            <summary>
            Creates an instance of <see cref="T:Sitecore.Xdb.Collection.ContactExpandOptions"/> where no related information is loaded.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ContactExpandOptions.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Options indicating the facets the system will return (if found) when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="facetKeys"/> contained <see cref="F:System.String.Empty"/> or <c>null</c> entries</exception>
        </member>
        <member name="M:Sitecore.Xdb.Collection.ContactExpandOptions.#ctor(Sitecore.Xdb.Collection.FacetKeysCollection)">
            <summary>
            Options indicating the facets the system will return (if found) when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="facetKeys"/> was <c>null</c></exception>
        </member>
        <member name="P:Sitecore.Xdb.Collection.ContactExpandOptions.InteractionsExpandOptions">
            <summary>
            Gets the options controlling which related interactions will be loaded (if any).
            </summary>
        </member>
        <member name="T:Sitecore.Xdb.Collection.EntityExpandOptions">
            <summary>
                Defines what data to include when entities such as contacts, interactions, device profiles are loaded from xDB.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.EntityExpandOptions.#ctor">
            <summary>
            Options indicating no facets will be loaded when returning the entities.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.EntityExpandOptions.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Options indicating the facets the system will return when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="facetKeys"/> contained <see cref="F:System.String.Empty"/> or <c>null</c> entries</exception>
            <remarks>
            The <see cref="P:Sitecore.Xdb.Collection.Model.DataRecord.Facets"/> will not contain entries for facets that were not found for the entity.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.EntityExpandOptions.#ctor(Sitecore.Xdb.Collection.FacetKeysCollection)">
            <summary>
            Options indicating the facets the system will return (if found) when reading the entities. 
            </summary>
            <param name="facetKeys">The keys of the facets to return with the entities.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="facetKeys"/> was <c>null</c></exception>
            <remarks>
            The <see cref="P:Sitecore.Xdb.Collection.Model.DataRecord.Facets"/> will not contain entries for facets that were not found for the entity.
            </remarks>
        </member>
        <member name="P:Sitecore.Xdb.Collection.EntityExpandOptions.FacetKeys">
            <summary>
            Gets the keys of the facets the system will return (if found) when reading the entities.
            </summary>
        </member>
        <member name="M:Sitecore.Xdb.Collection.SplitByChangeTypeVisitor.Visit(Sitecore.Xdb.Collection.ContactChange)">
            <remarks>
            Updates of the main contact records are detected as identifier changes (see <see cref="T:Sitecore.Xdb.Collection.ContactChange"/>) and 
            exposed in <see cref="P:Sitecore.Xdb.Collection.SplitByChangeTypeVisitor.ContactIdsWithUpdatedIdentifiers"/>.
            </remarks>
        </member>
        <member name="M:Sitecore.Xdb.Collection.SplitByChangeTypeVisitor.Split(System.Collections.Generic.IEnumerable{Sitecore.Xdb.Collection.ChangeBase})">
            <remarks>
            Each contact/interaction appears only once after the split.
            When there is both a change and a deletion for the same contact/interaction in <paramref name="recordChanges"/>, 
            the last change done will determine if the contact/interaction shows on deleted or changed ids after the split.
            </remarks>
        </member>
    </members>
</doc>
